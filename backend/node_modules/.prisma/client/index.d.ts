
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Student
 * 
 */
export type Student = $Result.DefaultSelection<Prisma.$StudentPayload>
/**
 * Model Form
 * 
 */
export type Form = $Result.DefaultSelection<Prisma.$FormPayload>
/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model Institution
 * 
 */
export type Institution = $Result.DefaultSelection<Prisma.$InstitutionPayload>
/**
 * Model InstitutionCategory
 * 
 */
export type InstitutionCategory = $Result.DefaultSelection<Prisma.$InstitutionCategoryPayload>
/**
 * Model InstitutionForm
 * 
 */
export type InstitutionForm = $Result.DefaultSelection<Prisma.$InstitutionFormPayload>
/**
 * Model AppliedInstitution
 * 
 */
export type AppliedInstitution = $Result.DefaultSelection<Prisma.$AppliedInstitutionPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Students
 * const students = await prisma.student.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Students
   * const students = await prisma.student.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.student`: Exposes CRUD operations for the **Student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.StudentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.form`: Exposes CRUD operations for the **Form** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Forms
    * const forms = await prisma.form.findMany()
    * ```
    */
  get form(): Prisma.FormDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.institution`: Exposes CRUD operations for the **Institution** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Institutions
    * const institutions = await prisma.institution.findMany()
    * ```
    */
  get institution(): Prisma.InstitutionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.institutionCategory`: Exposes CRUD operations for the **InstitutionCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InstitutionCategories
    * const institutionCategories = await prisma.institutionCategory.findMany()
    * ```
    */
  get institutionCategory(): Prisma.InstitutionCategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.institutionForm`: Exposes CRUD operations for the **InstitutionForm** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InstitutionForms
    * const institutionForms = await prisma.institutionForm.findMany()
    * ```
    */
  get institutionForm(): Prisma.InstitutionFormDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.appliedInstitution`: Exposes CRUD operations for the **AppliedInstitution** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AppliedInstitutions
    * const appliedInstitutions = await prisma.appliedInstitution.findMany()
    * ```
    */
  get appliedInstitution(): Prisma.AppliedInstitutionDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.13.0
   * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Student: 'Student',
    Form: 'Form',
    Admin: 'Admin',
    Institution: 'Institution',
    InstitutionCategory: 'InstitutionCategory',
    InstitutionForm: 'InstitutionForm',
    AppliedInstitution: 'AppliedInstitution'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "student" | "form" | "admin" | "institution" | "institutionCategory" | "institutionForm" | "appliedInstitution"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Student: {
        payload: Prisma.$StudentPayload<ExtArgs>
        fields: Prisma.StudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findFirst: {
            args: Prisma.StudentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findMany: {
            args: Prisma.StudentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          create: {
            args: Prisma.StudentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          createMany: {
            args: Prisma.StudentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          delete: {
            args: Prisma.StudentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          update: {
            args: Prisma.StudentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          deleteMany: {
            args: Prisma.StudentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          upsert: {
            args: Prisma.StudentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          aggregate: {
            args: Prisma.StudentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudent>
          }
          groupBy: {
            args: Prisma.StudentGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentCountArgs<ExtArgs>
            result: $Utils.Optional<StudentCountAggregateOutputType> | number
          }
        }
      }
      Form: {
        payload: Prisma.$FormPayload<ExtArgs>
        fields: Prisma.FormFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FormFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FormFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormPayload>
          }
          findFirst: {
            args: Prisma.FormFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FormFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormPayload>
          }
          findMany: {
            args: Prisma.FormFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormPayload>[]
          }
          create: {
            args: Prisma.FormCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormPayload>
          }
          createMany: {
            args: Prisma.FormCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FormCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormPayload>[]
          }
          delete: {
            args: Prisma.FormDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormPayload>
          }
          update: {
            args: Prisma.FormUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormPayload>
          }
          deleteMany: {
            args: Prisma.FormDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FormUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FormUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormPayload>[]
          }
          upsert: {
            args: Prisma.FormUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormPayload>
          }
          aggregate: {
            args: Prisma.FormAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateForm>
          }
          groupBy: {
            args: Prisma.FormGroupByArgs<ExtArgs>
            result: $Utils.Optional<FormGroupByOutputType>[]
          }
          count: {
            args: Prisma.FormCountArgs<ExtArgs>
            result: $Utils.Optional<FormCountAggregateOutputType> | number
          }
        }
      }
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdminUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      Institution: {
        payload: Prisma.$InstitutionPayload<ExtArgs>
        fields: Prisma.InstitutionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InstitutionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InstitutionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionPayload>
          }
          findFirst: {
            args: Prisma.InstitutionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InstitutionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionPayload>
          }
          findMany: {
            args: Prisma.InstitutionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionPayload>[]
          }
          create: {
            args: Prisma.InstitutionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionPayload>
          }
          createMany: {
            args: Prisma.InstitutionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InstitutionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionPayload>[]
          }
          delete: {
            args: Prisma.InstitutionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionPayload>
          }
          update: {
            args: Prisma.InstitutionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionPayload>
          }
          deleteMany: {
            args: Prisma.InstitutionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InstitutionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InstitutionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionPayload>[]
          }
          upsert: {
            args: Prisma.InstitutionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionPayload>
          }
          aggregate: {
            args: Prisma.InstitutionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInstitution>
          }
          groupBy: {
            args: Prisma.InstitutionGroupByArgs<ExtArgs>
            result: $Utils.Optional<InstitutionGroupByOutputType>[]
          }
          count: {
            args: Prisma.InstitutionCountArgs<ExtArgs>
            result: $Utils.Optional<InstitutionCountAggregateOutputType> | number
          }
        }
      }
      InstitutionCategory: {
        payload: Prisma.$InstitutionCategoryPayload<ExtArgs>
        fields: Prisma.InstitutionCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InstitutionCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InstitutionCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionCategoryPayload>
          }
          findFirst: {
            args: Prisma.InstitutionCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InstitutionCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionCategoryPayload>
          }
          findMany: {
            args: Prisma.InstitutionCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionCategoryPayload>[]
          }
          create: {
            args: Prisma.InstitutionCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionCategoryPayload>
          }
          createMany: {
            args: Prisma.InstitutionCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InstitutionCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionCategoryPayload>[]
          }
          delete: {
            args: Prisma.InstitutionCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionCategoryPayload>
          }
          update: {
            args: Prisma.InstitutionCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionCategoryPayload>
          }
          deleteMany: {
            args: Prisma.InstitutionCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InstitutionCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InstitutionCategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionCategoryPayload>[]
          }
          upsert: {
            args: Prisma.InstitutionCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionCategoryPayload>
          }
          aggregate: {
            args: Prisma.InstitutionCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInstitutionCategory>
          }
          groupBy: {
            args: Prisma.InstitutionCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<InstitutionCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.InstitutionCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<InstitutionCategoryCountAggregateOutputType> | number
          }
        }
      }
      InstitutionForm: {
        payload: Prisma.$InstitutionFormPayload<ExtArgs>
        fields: Prisma.InstitutionFormFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InstitutionFormFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionFormPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InstitutionFormFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionFormPayload>
          }
          findFirst: {
            args: Prisma.InstitutionFormFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionFormPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InstitutionFormFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionFormPayload>
          }
          findMany: {
            args: Prisma.InstitutionFormFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionFormPayload>[]
          }
          create: {
            args: Prisma.InstitutionFormCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionFormPayload>
          }
          createMany: {
            args: Prisma.InstitutionFormCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InstitutionFormCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionFormPayload>[]
          }
          delete: {
            args: Prisma.InstitutionFormDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionFormPayload>
          }
          update: {
            args: Prisma.InstitutionFormUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionFormPayload>
          }
          deleteMany: {
            args: Prisma.InstitutionFormDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InstitutionFormUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InstitutionFormUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionFormPayload>[]
          }
          upsert: {
            args: Prisma.InstitutionFormUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstitutionFormPayload>
          }
          aggregate: {
            args: Prisma.InstitutionFormAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInstitutionForm>
          }
          groupBy: {
            args: Prisma.InstitutionFormGroupByArgs<ExtArgs>
            result: $Utils.Optional<InstitutionFormGroupByOutputType>[]
          }
          count: {
            args: Prisma.InstitutionFormCountArgs<ExtArgs>
            result: $Utils.Optional<InstitutionFormCountAggregateOutputType> | number
          }
        }
      }
      AppliedInstitution: {
        payload: Prisma.$AppliedInstitutionPayload<ExtArgs>
        fields: Prisma.AppliedInstitutionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AppliedInstitutionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppliedInstitutionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppliedInstitutionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppliedInstitutionPayload>
          }
          findFirst: {
            args: Prisma.AppliedInstitutionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppliedInstitutionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppliedInstitutionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppliedInstitutionPayload>
          }
          findMany: {
            args: Prisma.AppliedInstitutionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppliedInstitutionPayload>[]
          }
          create: {
            args: Prisma.AppliedInstitutionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppliedInstitutionPayload>
          }
          createMany: {
            args: Prisma.AppliedInstitutionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AppliedInstitutionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppliedInstitutionPayload>[]
          }
          delete: {
            args: Prisma.AppliedInstitutionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppliedInstitutionPayload>
          }
          update: {
            args: Prisma.AppliedInstitutionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppliedInstitutionPayload>
          }
          deleteMany: {
            args: Prisma.AppliedInstitutionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AppliedInstitutionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AppliedInstitutionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppliedInstitutionPayload>[]
          }
          upsert: {
            args: Prisma.AppliedInstitutionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppliedInstitutionPayload>
          }
          aggregate: {
            args: Prisma.AppliedInstitutionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAppliedInstitution>
          }
          groupBy: {
            args: Prisma.AppliedInstitutionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AppliedInstitutionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppliedInstitutionCountArgs<ExtArgs>
            result: $Utils.Optional<AppliedInstitutionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    student?: StudentOmit
    form?: FormOmit
    admin?: AdminOmit
    institution?: InstitutionOmit
    institutionCategory?: InstitutionCategoryOmit
    institutionForm?: InstitutionFormOmit
    appliedInstitution?: AppliedInstitutionOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type StudentCountOutputType
   */

  export type StudentCountOutputType = {
    forms: number
    AppliedInstitution: number
  }

  export type StudentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    forms?: boolean | StudentCountOutputTypeCountFormsArgs
    AppliedInstitution?: boolean | StudentCountOutputTypeCountAppliedInstitutionArgs
  }

  // Custom InputTypes
  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCountOutputType
     */
    select?: StudentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountFormsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FormWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountAppliedInstitutionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppliedInstitutionWhereInput
  }


  /**
   * Count Type InstitutionCountOutputType
   */

  export type InstitutionCountOutputType = {
    institutionForms: number
    AppliedInstitution: number
  }

  export type InstitutionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    institutionForms?: boolean | InstitutionCountOutputTypeCountInstitutionFormsArgs
    AppliedInstitution?: boolean | InstitutionCountOutputTypeCountAppliedInstitutionArgs
  }

  // Custom InputTypes
  /**
   * InstitutionCountOutputType without action
   */
  export type InstitutionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitutionCountOutputType
     */
    select?: InstitutionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InstitutionCountOutputType without action
   */
  export type InstitutionCountOutputTypeCountInstitutionFormsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InstitutionFormWhereInput
  }

  /**
   * InstitutionCountOutputType without action
   */
  export type InstitutionCountOutputTypeCountAppliedInstitutionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppliedInstitutionWhereInput
  }


  /**
   * Count Type InstitutionCategoryCountOutputType
   */

  export type InstitutionCategoryCountOutputType = {
    institutions: number
  }

  export type InstitutionCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    institutions?: boolean | InstitutionCategoryCountOutputTypeCountInstitutionsArgs
  }

  // Custom InputTypes
  /**
   * InstitutionCategoryCountOutputType without action
   */
  export type InstitutionCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitutionCategoryCountOutputType
     */
    select?: InstitutionCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InstitutionCategoryCountOutputType without action
   */
  export type InstitutionCategoryCountOutputTypeCountInstitutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InstitutionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Student
   */

  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentMinAggregateOutputType = {
    studentId: string | null
    fullName: string | null
    email: string | null
    phone: string | null
    password: string | null
    address: string | null
    role: string | null
    dob: Date | null
    profile: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StudentMaxAggregateOutputType = {
    studentId: string | null
    fullName: string | null
    email: string | null
    phone: string | null
    password: string | null
    address: string | null
    role: string | null
    dob: Date | null
    profile: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StudentCountAggregateOutputType = {
    studentId: number
    fullName: number
    email: number
    phone: number
    password: number
    address: number
    role: number
    dob: number
    profile: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StudentMinAggregateInputType = {
    studentId?: true
    fullName?: true
    email?: true
    phone?: true
    password?: true
    address?: true
    role?: true
    dob?: true
    profile?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StudentMaxAggregateInputType = {
    studentId?: true
    fullName?: true
    email?: true
    phone?: true
    password?: true
    address?: true
    role?: true
    dob?: true
    profile?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StudentCountAggregateInputType = {
    studentId?: true
    fullName?: true
    email?: true
    phone?: true
    password?: true
    address?: true
    role?: true
    dob?: true
    profile?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student to aggregate.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type StudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithAggregationInput | StudentOrderByWithAggregationInput[]
    by: StudentScalarFieldEnum[] | StudentScalarFieldEnum
    having?: StudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }

  export type StudentGroupByOutputType = {
    studentId: string
    fullName: string
    email: string
    phone: string | null
    password: string
    address: string | null
    role: string
    dob: Date
    profile: string | null
    createdAt: Date
    updatedAt: Date
    _count: StudentCountAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends StudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type StudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    studentId?: boolean
    fullName?: boolean
    email?: boolean
    phone?: boolean
    password?: boolean
    address?: boolean
    role?: boolean
    dob?: boolean
    profile?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    forms?: boolean | Student$formsArgs<ExtArgs>
    AppliedInstitution?: boolean | Student$AppliedInstitutionArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    studentId?: boolean
    fullName?: boolean
    email?: boolean
    phone?: boolean
    password?: boolean
    address?: boolean
    role?: boolean
    dob?: boolean
    profile?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["student"]>

  export type StudentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    studentId?: boolean
    fullName?: boolean
    email?: boolean
    phone?: boolean
    password?: boolean
    address?: boolean
    role?: boolean
    dob?: boolean
    profile?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["student"]>

  export type StudentSelectScalar = {
    studentId?: boolean
    fullName?: boolean
    email?: boolean
    phone?: boolean
    password?: boolean
    address?: boolean
    role?: boolean
    dob?: boolean
    profile?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StudentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"studentId" | "fullName" | "email" | "phone" | "password" | "address" | "role" | "dob" | "profile" | "createdAt" | "updatedAt", ExtArgs["result"]["student"]>
  export type StudentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    forms?: boolean | Student$formsArgs<ExtArgs>
    AppliedInstitution?: boolean | Student$AppliedInstitutionArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StudentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type StudentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Student"
    objects: {
      forms: Prisma.$FormPayload<ExtArgs>[]
      AppliedInstitution: Prisma.$AppliedInstitutionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      studentId: string
      fullName: string
      email: string
      phone: string | null
      password: string
      address: string | null
      role: string
      dob: Date
      profile: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["student"]>
    composites: {}
  }

  type StudentGetPayload<S extends boolean | null | undefined | StudentDefaultArgs> = $Result.GetResult<Prisma.$StudentPayload, S>

  type StudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentCountAggregateInputType | true
    }

  export interface StudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Student'], meta: { name: 'Student' } }
    /**
     * Find zero or one Student that matches the filter.
     * @param {StudentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentFindUniqueArgs>(args: SelectSubset<T, StudentFindUniqueArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Student that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentFindUniqueOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentFindFirstArgs>(args?: SelectSubset<T, StudentFindFirstArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `studentId`
     * const studentWithStudentIdOnly = await prisma.student.findMany({ select: { studentId: true } })
     * 
     */
    findMany<T extends StudentFindManyArgs>(args?: SelectSubset<T, StudentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Student.
     * @param {StudentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
     */
    create<T extends StudentCreateArgs>(args: SelectSubset<T, StudentCreateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Students.
     * @param {StudentCreateManyArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentCreateManyArgs>(args?: SelectSubset<T, StudentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Students and returns the data saved in the database.
     * @param {StudentCreateManyAndReturnArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Students and only return the `studentId`
     * const studentWithStudentIdOnly = await prisma.student.createManyAndReturn({
     *   select: { studentId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Student.
     * @param {StudentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
     */
    delete<T extends StudentDeleteArgs>(args: SelectSubset<T, StudentDeleteArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Student.
     * @param {StudentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentUpdateArgs>(args: SelectSubset<T, StudentUpdateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Students.
     * @param {StudentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentDeleteManyArgs>(args?: SelectSubset<T, StudentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentUpdateManyArgs>(args: SelectSubset<T, StudentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students and returns the data updated in the database.
     * @param {StudentUpdateManyAndReturnArgs} args - Arguments to update many Students.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Students and only return the `studentId`
     * const studentWithStudentIdOnly = await prisma.student.updateManyAndReturn({
     *   select: { studentId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Student.
     * @param {StudentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
     */
    upsert<T extends StudentUpsertArgs>(args: SelectSubset<T, StudentUpsertArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends StudentCountArgs>(
      args?: Subset<T, StudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): Prisma.PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentGroupByArgs['orderBy'] }
        : { orderBy?: StudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Student model
   */
  readonly fields: StudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    forms<T extends Student$formsArgs<ExtArgs> = {}>(args?: Subset<T, Student$formsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    AppliedInstitution<T extends Student$AppliedInstitutionArgs<ExtArgs> = {}>(args?: Subset<T, Student$AppliedInstitutionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppliedInstitutionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Student model
   */
  interface StudentFieldRefs {
    readonly studentId: FieldRef<"Student", 'String'>
    readonly fullName: FieldRef<"Student", 'String'>
    readonly email: FieldRef<"Student", 'String'>
    readonly phone: FieldRef<"Student", 'String'>
    readonly password: FieldRef<"Student", 'String'>
    readonly address: FieldRef<"Student", 'String'>
    readonly role: FieldRef<"Student", 'String'>
    readonly dob: FieldRef<"Student", 'DateTime'>
    readonly profile: FieldRef<"Student", 'String'>
    readonly createdAt: FieldRef<"Student", 'DateTime'>
    readonly updatedAt: FieldRef<"Student", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Student findUnique
   */
  export type StudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findUniqueOrThrow
   */
  export type StudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findFirst
   */
  export type StudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findFirstOrThrow
   */
  export type StudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findMany
   */
  export type StudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Students to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student create
   */
  export type StudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to create a Student.
     */
    data: XOR<StudentCreateInput, StudentUncheckedCreateInput>
  }

  /**
   * Student createMany
   */
  export type StudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Student createManyAndReturn
   */
  export type StudentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Student update
   */
  export type StudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to update a Student.
     */
    data: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
    /**
     * Choose, which Student to update.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student updateMany
   */
  export type StudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to update.
     */
    limit?: number
  }

  /**
   * Student updateManyAndReturn
   */
  export type StudentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to update.
     */
    limit?: number
  }

  /**
   * Student upsert
   */
  export type StudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The filter to search for the Student to update in case it exists.
     */
    where: StudentWhereUniqueInput
    /**
     * In case the Student found by the `where` argument doesn't exist, create a new Student with this data.
     */
    create: XOR<StudentCreateInput, StudentUncheckedCreateInput>
    /**
     * In case the Student was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
  }

  /**
   * Student delete
   */
  export type StudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter which Student to delete.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student deleteMany
   */
  export type StudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Students to delete
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to delete.
     */
    limit?: number
  }

  /**
   * Student.forms
   */
  export type Student$formsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Form
     */
    omit?: FormOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
    where?: FormWhereInput
    orderBy?: FormOrderByWithRelationInput | FormOrderByWithRelationInput[]
    cursor?: FormWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FormScalarFieldEnum | FormScalarFieldEnum[]
  }

  /**
   * Student.AppliedInstitution
   */
  export type Student$AppliedInstitutionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppliedInstitution
     */
    select?: AppliedInstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppliedInstitution
     */
    omit?: AppliedInstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppliedInstitutionInclude<ExtArgs> | null
    where?: AppliedInstitutionWhereInput
    orderBy?: AppliedInstitutionOrderByWithRelationInput | AppliedInstitutionOrderByWithRelationInput[]
    cursor?: AppliedInstitutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppliedInstitutionScalarFieldEnum | AppliedInstitutionScalarFieldEnum[]
  }

  /**
   * Student without action
   */
  export type StudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
  }


  /**
   * Model Form
   */

  export type AggregateForm = {
    _count: FormCountAggregateOutputType | null
    _avg: FormAvgAggregateOutputType | null
    _sum: FormSumAggregateOutputType | null
    _min: FormMinAggregateOutputType | null
    _max: FormMaxAggregateOutputType | null
  }

  export type FormAvgAggregateOutputType = {
    reg: number | null
    hscRoll: number | null
    sscRoll: number | null
    hscGPA: number | null
    sscGPA: number | null
  }

  export type FormSumAggregateOutputType = {
    reg: number | null
    hscRoll: number | null
    sscRoll: number | null
    hscGPA: number | null
    sscGPA: number | null
  }

  export type FormMinAggregateOutputType = {
    formId: string | null
    studentId: string | null
    board: string | null
    reg: number | null
    hscRoll: number | null
    sscRoll: number | null
    hscGPA: number | null
    sscGPA: number | null
  }

  export type FormMaxAggregateOutputType = {
    formId: string | null
    studentId: string | null
    board: string | null
    reg: number | null
    hscRoll: number | null
    sscRoll: number | null
    hscGPA: number | null
    sscGPA: number | null
  }

  export type FormCountAggregateOutputType = {
    formId: number
    studentId: number
    board: number
    reg: number
    hscRoll: number
    sscRoll: number
    hscGPA: number
    sscGPA: number
    _all: number
  }


  export type FormAvgAggregateInputType = {
    reg?: true
    hscRoll?: true
    sscRoll?: true
    hscGPA?: true
    sscGPA?: true
  }

  export type FormSumAggregateInputType = {
    reg?: true
    hscRoll?: true
    sscRoll?: true
    hscGPA?: true
    sscGPA?: true
  }

  export type FormMinAggregateInputType = {
    formId?: true
    studentId?: true
    board?: true
    reg?: true
    hscRoll?: true
    sscRoll?: true
    hscGPA?: true
    sscGPA?: true
  }

  export type FormMaxAggregateInputType = {
    formId?: true
    studentId?: true
    board?: true
    reg?: true
    hscRoll?: true
    sscRoll?: true
    hscGPA?: true
    sscGPA?: true
  }

  export type FormCountAggregateInputType = {
    formId?: true
    studentId?: true
    board?: true
    reg?: true
    hscRoll?: true
    sscRoll?: true
    hscGPA?: true
    sscGPA?: true
    _all?: true
  }

  export type FormAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Form to aggregate.
     */
    where?: FormWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Forms to fetch.
     */
    orderBy?: FormOrderByWithRelationInput | FormOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FormWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Forms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Forms
    **/
    _count?: true | FormCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FormAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FormSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FormMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FormMaxAggregateInputType
  }

  export type GetFormAggregateType<T extends FormAggregateArgs> = {
        [P in keyof T & keyof AggregateForm]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateForm[P]>
      : GetScalarType<T[P], AggregateForm[P]>
  }




  export type FormGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FormWhereInput
    orderBy?: FormOrderByWithAggregationInput | FormOrderByWithAggregationInput[]
    by: FormScalarFieldEnum[] | FormScalarFieldEnum
    having?: FormScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FormCountAggregateInputType | true
    _avg?: FormAvgAggregateInputType
    _sum?: FormSumAggregateInputType
    _min?: FormMinAggregateInputType
    _max?: FormMaxAggregateInputType
  }

  export type FormGroupByOutputType = {
    formId: string
    studentId: string
    board: string
    reg: number
    hscRoll: number
    sscRoll: number
    hscGPA: number
    sscGPA: number
    _count: FormCountAggregateOutputType | null
    _avg: FormAvgAggregateOutputType | null
    _sum: FormSumAggregateOutputType | null
    _min: FormMinAggregateOutputType | null
    _max: FormMaxAggregateOutputType | null
  }

  type GetFormGroupByPayload<T extends FormGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FormGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FormGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FormGroupByOutputType[P]>
            : GetScalarType<T[P], FormGroupByOutputType[P]>
        }
      >
    >


  export type FormSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    formId?: boolean
    studentId?: boolean
    board?: boolean
    reg?: boolean
    hscRoll?: boolean
    sscRoll?: boolean
    hscGPA?: boolean
    sscGPA?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["form"]>

  export type FormSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    formId?: boolean
    studentId?: boolean
    board?: boolean
    reg?: boolean
    hscRoll?: boolean
    sscRoll?: boolean
    hscGPA?: boolean
    sscGPA?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["form"]>

  export type FormSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    formId?: boolean
    studentId?: boolean
    board?: boolean
    reg?: boolean
    hscRoll?: boolean
    sscRoll?: boolean
    hscGPA?: boolean
    sscGPA?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["form"]>

  export type FormSelectScalar = {
    formId?: boolean
    studentId?: boolean
    board?: boolean
    reg?: boolean
    hscRoll?: boolean
    sscRoll?: boolean
    hscGPA?: boolean
    sscGPA?: boolean
  }

  export type FormOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"formId" | "studentId" | "board" | "reg" | "hscRoll" | "sscRoll" | "hscGPA" | "sscGPA", ExtArgs["result"]["form"]>
  export type FormInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type FormIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type FormIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }

  export type $FormPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Form"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      formId: string
      studentId: string
      board: string
      reg: number
      hscRoll: number
      sscRoll: number
      hscGPA: number
      sscGPA: number
    }, ExtArgs["result"]["form"]>
    composites: {}
  }

  type FormGetPayload<S extends boolean | null | undefined | FormDefaultArgs> = $Result.GetResult<Prisma.$FormPayload, S>

  type FormCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FormFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FormCountAggregateInputType | true
    }

  export interface FormDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Form'], meta: { name: 'Form' } }
    /**
     * Find zero or one Form that matches the filter.
     * @param {FormFindUniqueArgs} args - Arguments to find a Form
     * @example
     * // Get one Form
     * const form = await prisma.form.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FormFindUniqueArgs>(args: SelectSubset<T, FormFindUniqueArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Form that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FormFindUniqueOrThrowArgs} args - Arguments to find a Form
     * @example
     * // Get one Form
     * const form = await prisma.form.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FormFindUniqueOrThrowArgs>(args: SelectSubset<T, FormFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Form that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormFindFirstArgs} args - Arguments to find a Form
     * @example
     * // Get one Form
     * const form = await prisma.form.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FormFindFirstArgs>(args?: SelectSubset<T, FormFindFirstArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Form that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormFindFirstOrThrowArgs} args - Arguments to find a Form
     * @example
     * // Get one Form
     * const form = await prisma.form.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FormFindFirstOrThrowArgs>(args?: SelectSubset<T, FormFindFirstOrThrowArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Forms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Forms
     * const forms = await prisma.form.findMany()
     * 
     * // Get first 10 Forms
     * const forms = await prisma.form.findMany({ take: 10 })
     * 
     * // Only select the `formId`
     * const formWithFormIdOnly = await prisma.form.findMany({ select: { formId: true } })
     * 
     */
    findMany<T extends FormFindManyArgs>(args?: SelectSubset<T, FormFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Form.
     * @param {FormCreateArgs} args - Arguments to create a Form.
     * @example
     * // Create one Form
     * const Form = await prisma.form.create({
     *   data: {
     *     // ... data to create a Form
     *   }
     * })
     * 
     */
    create<T extends FormCreateArgs>(args: SelectSubset<T, FormCreateArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Forms.
     * @param {FormCreateManyArgs} args - Arguments to create many Forms.
     * @example
     * // Create many Forms
     * const form = await prisma.form.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FormCreateManyArgs>(args?: SelectSubset<T, FormCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Forms and returns the data saved in the database.
     * @param {FormCreateManyAndReturnArgs} args - Arguments to create many Forms.
     * @example
     * // Create many Forms
     * const form = await prisma.form.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Forms and only return the `formId`
     * const formWithFormIdOnly = await prisma.form.createManyAndReturn({
     *   select: { formId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FormCreateManyAndReturnArgs>(args?: SelectSubset<T, FormCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Form.
     * @param {FormDeleteArgs} args - Arguments to delete one Form.
     * @example
     * // Delete one Form
     * const Form = await prisma.form.delete({
     *   where: {
     *     // ... filter to delete one Form
     *   }
     * })
     * 
     */
    delete<T extends FormDeleteArgs>(args: SelectSubset<T, FormDeleteArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Form.
     * @param {FormUpdateArgs} args - Arguments to update one Form.
     * @example
     * // Update one Form
     * const form = await prisma.form.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FormUpdateArgs>(args: SelectSubset<T, FormUpdateArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Forms.
     * @param {FormDeleteManyArgs} args - Arguments to filter Forms to delete.
     * @example
     * // Delete a few Forms
     * const { count } = await prisma.form.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FormDeleteManyArgs>(args?: SelectSubset<T, FormDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Forms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Forms
     * const form = await prisma.form.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FormUpdateManyArgs>(args: SelectSubset<T, FormUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Forms and returns the data updated in the database.
     * @param {FormUpdateManyAndReturnArgs} args - Arguments to update many Forms.
     * @example
     * // Update many Forms
     * const form = await prisma.form.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Forms and only return the `formId`
     * const formWithFormIdOnly = await prisma.form.updateManyAndReturn({
     *   select: { formId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FormUpdateManyAndReturnArgs>(args: SelectSubset<T, FormUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Form.
     * @param {FormUpsertArgs} args - Arguments to update or create a Form.
     * @example
     * // Update or create a Form
     * const form = await prisma.form.upsert({
     *   create: {
     *     // ... data to create a Form
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Form we want to update
     *   }
     * })
     */
    upsert<T extends FormUpsertArgs>(args: SelectSubset<T, FormUpsertArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Forms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormCountArgs} args - Arguments to filter Forms to count.
     * @example
     * // Count the number of Forms
     * const count = await prisma.form.count({
     *   where: {
     *     // ... the filter for the Forms we want to count
     *   }
     * })
    **/
    count<T extends FormCountArgs>(
      args?: Subset<T, FormCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FormCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Form.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FormAggregateArgs>(args: Subset<T, FormAggregateArgs>): Prisma.PrismaPromise<GetFormAggregateType<T>>

    /**
     * Group by Form.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FormGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FormGroupByArgs['orderBy'] }
        : { orderBy?: FormGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FormGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFormGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Form model
   */
  readonly fields: FormFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Form.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FormClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Form model
   */
  interface FormFieldRefs {
    readonly formId: FieldRef<"Form", 'String'>
    readonly studentId: FieldRef<"Form", 'String'>
    readonly board: FieldRef<"Form", 'String'>
    readonly reg: FieldRef<"Form", 'Int'>
    readonly hscRoll: FieldRef<"Form", 'Int'>
    readonly sscRoll: FieldRef<"Form", 'Int'>
    readonly hscGPA: FieldRef<"Form", 'Float'>
    readonly sscGPA: FieldRef<"Form", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Form findUnique
   */
  export type FormFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Form
     */
    omit?: FormOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
    /**
     * Filter, which Form to fetch.
     */
    where: FormWhereUniqueInput
  }

  /**
   * Form findUniqueOrThrow
   */
  export type FormFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Form
     */
    omit?: FormOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
    /**
     * Filter, which Form to fetch.
     */
    where: FormWhereUniqueInput
  }

  /**
   * Form findFirst
   */
  export type FormFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Form
     */
    omit?: FormOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
    /**
     * Filter, which Form to fetch.
     */
    where?: FormWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Forms to fetch.
     */
    orderBy?: FormOrderByWithRelationInput | FormOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Forms.
     */
    cursor?: FormWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Forms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Forms.
     */
    distinct?: FormScalarFieldEnum | FormScalarFieldEnum[]
  }

  /**
   * Form findFirstOrThrow
   */
  export type FormFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Form
     */
    omit?: FormOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
    /**
     * Filter, which Form to fetch.
     */
    where?: FormWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Forms to fetch.
     */
    orderBy?: FormOrderByWithRelationInput | FormOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Forms.
     */
    cursor?: FormWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Forms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Forms.
     */
    distinct?: FormScalarFieldEnum | FormScalarFieldEnum[]
  }

  /**
   * Form findMany
   */
  export type FormFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Form
     */
    omit?: FormOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
    /**
     * Filter, which Forms to fetch.
     */
    where?: FormWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Forms to fetch.
     */
    orderBy?: FormOrderByWithRelationInput | FormOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Forms.
     */
    cursor?: FormWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Forms.
     */
    skip?: number
    distinct?: FormScalarFieldEnum | FormScalarFieldEnum[]
  }

  /**
   * Form create
   */
  export type FormCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Form
     */
    omit?: FormOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
    /**
     * The data needed to create a Form.
     */
    data: XOR<FormCreateInput, FormUncheckedCreateInput>
  }

  /**
   * Form createMany
   */
  export type FormCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Forms.
     */
    data: FormCreateManyInput | FormCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Form createManyAndReturn
   */
  export type FormCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Form
     */
    omit?: FormOmit<ExtArgs> | null
    /**
     * The data used to create many Forms.
     */
    data: FormCreateManyInput | FormCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Form update
   */
  export type FormUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Form
     */
    omit?: FormOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
    /**
     * The data needed to update a Form.
     */
    data: XOR<FormUpdateInput, FormUncheckedUpdateInput>
    /**
     * Choose, which Form to update.
     */
    where: FormWhereUniqueInput
  }

  /**
   * Form updateMany
   */
  export type FormUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Forms.
     */
    data: XOR<FormUpdateManyMutationInput, FormUncheckedUpdateManyInput>
    /**
     * Filter which Forms to update
     */
    where?: FormWhereInput
    /**
     * Limit how many Forms to update.
     */
    limit?: number
  }

  /**
   * Form updateManyAndReturn
   */
  export type FormUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Form
     */
    omit?: FormOmit<ExtArgs> | null
    /**
     * The data used to update Forms.
     */
    data: XOR<FormUpdateManyMutationInput, FormUncheckedUpdateManyInput>
    /**
     * Filter which Forms to update
     */
    where?: FormWhereInput
    /**
     * Limit how many Forms to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Form upsert
   */
  export type FormUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Form
     */
    omit?: FormOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
    /**
     * The filter to search for the Form to update in case it exists.
     */
    where: FormWhereUniqueInput
    /**
     * In case the Form found by the `where` argument doesn't exist, create a new Form with this data.
     */
    create: XOR<FormCreateInput, FormUncheckedCreateInput>
    /**
     * In case the Form was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FormUpdateInput, FormUncheckedUpdateInput>
  }

  /**
   * Form delete
   */
  export type FormDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Form
     */
    omit?: FormOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
    /**
     * Filter which Form to delete.
     */
    where: FormWhereUniqueInput
  }

  /**
   * Form deleteMany
   */
  export type FormDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Forms to delete
     */
    where?: FormWhereInput
    /**
     * Limit how many Forms to delete.
     */
    limit?: number
  }

  /**
   * Form without action
   */
  export type FormDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Form
     */
    omit?: FormOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
  }


  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminMinAggregateOutputType = {
    adminId: string | null
    email: string | null
    password: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AdminMaxAggregateOutputType = {
    adminId: string | null
    email: string | null
    password: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AdminCountAggregateOutputType = {
    adminId: number
    email: number
    password: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AdminMinAggregateInputType = {
    adminId?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AdminMaxAggregateInputType = {
    adminId?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AdminCountAggregateInputType = {
    adminId?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    adminId: string
    email: string
    password: string
    role: string
    createdAt: Date
    updatedAt: Date
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    adminId?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    adminId?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    adminId?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectScalar = {
    adminId?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AdminOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"adminId" | "email" | "password" | "role" | "createdAt" | "updatedAt", ExtArgs["result"]["admin"]>

  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      adminId: string
      email: string
      password: string
      role: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }

  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminFindUniqueArgs>(args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Admin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminFindFirstArgs>(args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `adminId`
     * const adminWithAdminIdOnly = await prisma.admin.findMany({ select: { adminId: true } })
     * 
     */
    findMany<T extends AdminFindManyArgs>(args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
     */
    create<T extends AdminCreateArgs>(args: SelectSubset<T, AdminCreateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Admins.
     * @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminCreateManyArgs>(args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Admins and returns the data saved in the database.
     * @param {AdminCreateManyAndReturnArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Admins and only return the `adminId`
     * const adminWithAdminIdOnly = await prisma.admin.createManyAndReturn({
     *   select: { adminId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
     */
    delete<T extends AdminDeleteArgs>(args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminUpdateArgs>(args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminDeleteManyArgs>(args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminUpdateManyArgs>(args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins and returns the data updated in the database.
     * @param {AdminUpdateManyAndReturnArgs} args - Arguments to update many Admins.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Admins and only return the `adminId`
     * const adminWithAdminIdOnly = await prisma.admin.updateManyAndReturn({
     *   select: { adminId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdminUpdateManyAndReturnArgs>(args: SelectSubset<T, AdminUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
     */
    upsert<T extends AdminUpsertArgs>(args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Admin model
   */
  interface AdminFieldRefs {
    readonly adminId: FieldRef<"Admin", 'String'>
    readonly email: FieldRef<"Admin", 'String'>
    readonly password: FieldRef<"Admin", 'String'>
    readonly role: FieldRef<"Admin", 'String'>
    readonly createdAt: FieldRef<"Admin", 'DateTime'>
    readonly updatedAt: FieldRef<"Admin", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }

  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin createManyAndReturn
   */
  export type AdminCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to update.
     */
    limit?: number
  }

  /**
   * Admin updateManyAndReturn
   */
  export type AdminUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to update.
     */
    limit?: number
  }

  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }

  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to delete.
     */
    limit?: number
  }

  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
  }


  /**
   * Model Institution
   */

  export type AggregateInstitution = {
    _count: InstitutionCountAggregateOutputType | null
    _avg: InstitutionAvgAggregateOutputType | null
    _sum: InstitutionSumAggregateOutputType | null
    _min: InstitutionMinAggregateOutputType | null
    _max: InstitutionMaxAggregateOutputType | null
  }

  export type InstitutionAvgAggregateOutputType = {
    requirementsHscGPA: number | null
    requirementsSscGPA: number | null
  }

  export type InstitutionSumAggregateOutputType = {
    requirementsHscGPA: number | null
    requirementsSscGPA: number | null
  }

  export type InstitutionMinAggregateOutputType = {
    institutionId: string | null
    name: string | null
    requirementsHscGPA: number | null
    requirementsSscGPA: number | null
    institutionCategoryInstitutionCategoryId: string | null
  }

  export type InstitutionMaxAggregateOutputType = {
    institutionId: string | null
    name: string | null
    requirementsHscGPA: number | null
    requirementsSscGPA: number | null
    institutionCategoryInstitutionCategoryId: string | null
  }

  export type InstitutionCountAggregateOutputType = {
    institutionId: number
    name: number
    requirementsHscGPA: number
    requirementsSscGPA: number
    institutionCategoryInstitutionCategoryId: number
    _all: number
  }


  export type InstitutionAvgAggregateInputType = {
    requirementsHscGPA?: true
    requirementsSscGPA?: true
  }

  export type InstitutionSumAggregateInputType = {
    requirementsHscGPA?: true
    requirementsSscGPA?: true
  }

  export type InstitutionMinAggregateInputType = {
    institutionId?: true
    name?: true
    requirementsHscGPA?: true
    requirementsSscGPA?: true
    institutionCategoryInstitutionCategoryId?: true
  }

  export type InstitutionMaxAggregateInputType = {
    institutionId?: true
    name?: true
    requirementsHscGPA?: true
    requirementsSscGPA?: true
    institutionCategoryInstitutionCategoryId?: true
  }

  export type InstitutionCountAggregateInputType = {
    institutionId?: true
    name?: true
    requirementsHscGPA?: true
    requirementsSscGPA?: true
    institutionCategoryInstitutionCategoryId?: true
    _all?: true
  }

  export type InstitutionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Institution to aggregate.
     */
    where?: InstitutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Institutions to fetch.
     */
    orderBy?: InstitutionOrderByWithRelationInput | InstitutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InstitutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Institutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Institutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Institutions
    **/
    _count?: true | InstitutionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InstitutionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InstitutionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InstitutionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InstitutionMaxAggregateInputType
  }

  export type GetInstitutionAggregateType<T extends InstitutionAggregateArgs> = {
        [P in keyof T & keyof AggregateInstitution]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInstitution[P]>
      : GetScalarType<T[P], AggregateInstitution[P]>
  }




  export type InstitutionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InstitutionWhereInput
    orderBy?: InstitutionOrderByWithAggregationInput | InstitutionOrderByWithAggregationInput[]
    by: InstitutionScalarFieldEnum[] | InstitutionScalarFieldEnum
    having?: InstitutionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InstitutionCountAggregateInputType | true
    _avg?: InstitutionAvgAggregateInputType
    _sum?: InstitutionSumAggregateInputType
    _min?: InstitutionMinAggregateInputType
    _max?: InstitutionMaxAggregateInputType
  }

  export type InstitutionGroupByOutputType = {
    institutionId: string
    name: string
    requirementsHscGPA: number
    requirementsSscGPA: number
    institutionCategoryInstitutionCategoryId: string | null
    _count: InstitutionCountAggregateOutputType | null
    _avg: InstitutionAvgAggregateOutputType | null
    _sum: InstitutionSumAggregateOutputType | null
    _min: InstitutionMinAggregateOutputType | null
    _max: InstitutionMaxAggregateOutputType | null
  }

  type GetInstitutionGroupByPayload<T extends InstitutionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InstitutionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InstitutionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InstitutionGroupByOutputType[P]>
            : GetScalarType<T[P], InstitutionGroupByOutputType[P]>
        }
      >
    >


  export type InstitutionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    institutionId?: boolean
    name?: boolean
    requirementsHscGPA?: boolean
    requirementsSscGPA?: boolean
    institutionCategoryInstitutionCategoryId?: boolean
    institutionForms?: boolean | Institution$institutionFormsArgs<ExtArgs>
    AppliedInstitution?: boolean | Institution$AppliedInstitutionArgs<ExtArgs>
    InstitutionCategory?: boolean | Institution$InstitutionCategoryArgs<ExtArgs>
    _count?: boolean | InstitutionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["institution"]>

  export type InstitutionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    institutionId?: boolean
    name?: boolean
    requirementsHscGPA?: boolean
    requirementsSscGPA?: boolean
    institutionCategoryInstitutionCategoryId?: boolean
    InstitutionCategory?: boolean | Institution$InstitutionCategoryArgs<ExtArgs>
  }, ExtArgs["result"]["institution"]>

  export type InstitutionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    institutionId?: boolean
    name?: boolean
    requirementsHscGPA?: boolean
    requirementsSscGPA?: boolean
    institutionCategoryInstitutionCategoryId?: boolean
    InstitutionCategory?: boolean | Institution$InstitutionCategoryArgs<ExtArgs>
  }, ExtArgs["result"]["institution"]>

  export type InstitutionSelectScalar = {
    institutionId?: boolean
    name?: boolean
    requirementsHscGPA?: boolean
    requirementsSscGPA?: boolean
    institutionCategoryInstitutionCategoryId?: boolean
  }

  export type InstitutionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"institutionId" | "name" | "requirementsHscGPA" | "requirementsSscGPA" | "institutionCategoryInstitutionCategoryId", ExtArgs["result"]["institution"]>
  export type InstitutionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    institutionForms?: boolean | Institution$institutionFormsArgs<ExtArgs>
    AppliedInstitution?: boolean | Institution$AppliedInstitutionArgs<ExtArgs>
    InstitutionCategory?: boolean | Institution$InstitutionCategoryArgs<ExtArgs>
    _count?: boolean | InstitutionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InstitutionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    InstitutionCategory?: boolean | Institution$InstitutionCategoryArgs<ExtArgs>
  }
  export type InstitutionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    InstitutionCategory?: boolean | Institution$InstitutionCategoryArgs<ExtArgs>
  }

  export type $InstitutionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Institution"
    objects: {
      institutionForms: Prisma.$InstitutionFormPayload<ExtArgs>[]
      AppliedInstitution: Prisma.$AppliedInstitutionPayload<ExtArgs>[]
      InstitutionCategory: Prisma.$InstitutionCategoryPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      institutionId: string
      name: string
      requirementsHscGPA: number
      requirementsSscGPA: number
      institutionCategoryInstitutionCategoryId: string | null
    }, ExtArgs["result"]["institution"]>
    composites: {}
  }

  type InstitutionGetPayload<S extends boolean | null | undefined | InstitutionDefaultArgs> = $Result.GetResult<Prisma.$InstitutionPayload, S>

  type InstitutionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InstitutionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InstitutionCountAggregateInputType | true
    }

  export interface InstitutionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Institution'], meta: { name: 'Institution' } }
    /**
     * Find zero or one Institution that matches the filter.
     * @param {InstitutionFindUniqueArgs} args - Arguments to find a Institution
     * @example
     * // Get one Institution
     * const institution = await prisma.institution.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InstitutionFindUniqueArgs>(args: SelectSubset<T, InstitutionFindUniqueArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Institution that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InstitutionFindUniqueOrThrowArgs} args - Arguments to find a Institution
     * @example
     * // Get one Institution
     * const institution = await prisma.institution.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InstitutionFindUniqueOrThrowArgs>(args: SelectSubset<T, InstitutionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Institution that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionFindFirstArgs} args - Arguments to find a Institution
     * @example
     * // Get one Institution
     * const institution = await prisma.institution.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InstitutionFindFirstArgs>(args?: SelectSubset<T, InstitutionFindFirstArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Institution that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionFindFirstOrThrowArgs} args - Arguments to find a Institution
     * @example
     * // Get one Institution
     * const institution = await prisma.institution.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InstitutionFindFirstOrThrowArgs>(args?: SelectSubset<T, InstitutionFindFirstOrThrowArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Institutions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Institutions
     * const institutions = await prisma.institution.findMany()
     * 
     * // Get first 10 Institutions
     * const institutions = await prisma.institution.findMany({ take: 10 })
     * 
     * // Only select the `institutionId`
     * const institutionWithInstitutionIdOnly = await prisma.institution.findMany({ select: { institutionId: true } })
     * 
     */
    findMany<T extends InstitutionFindManyArgs>(args?: SelectSubset<T, InstitutionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Institution.
     * @param {InstitutionCreateArgs} args - Arguments to create a Institution.
     * @example
     * // Create one Institution
     * const Institution = await prisma.institution.create({
     *   data: {
     *     // ... data to create a Institution
     *   }
     * })
     * 
     */
    create<T extends InstitutionCreateArgs>(args: SelectSubset<T, InstitutionCreateArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Institutions.
     * @param {InstitutionCreateManyArgs} args - Arguments to create many Institutions.
     * @example
     * // Create many Institutions
     * const institution = await prisma.institution.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InstitutionCreateManyArgs>(args?: SelectSubset<T, InstitutionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Institutions and returns the data saved in the database.
     * @param {InstitutionCreateManyAndReturnArgs} args - Arguments to create many Institutions.
     * @example
     * // Create many Institutions
     * const institution = await prisma.institution.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Institutions and only return the `institutionId`
     * const institutionWithInstitutionIdOnly = await prisma.institution.createManyAndReturn({
     *   select: { institutionId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InstitutionCreateManyAndReturnArgs>(args?: SelectSubset<T, InstitutionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Institution.
     * @param {InstitutionDeleteArgs} args - Arguments to delete one Institution.
     * @example
     * // Delete one Institution
     * const Institution = await prisma.institution.delete({
     *   where: {
     *     // ... filter to delete one Institution
     *   }
     * })
     * 
     */
    delete<T extends InstitutionDeleteArgs>(args: SelectSubset<T, InstitutionDeleteArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Institution.
     * @param {InstitutionUpdateArgs} args - Arguments to update one Institution.
     * @example
     * // Update one Institution
     * const institution = await prisma.institution.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InstitutionUpdateArgs>(args: SelectSubset<T, InstitutionUpdateArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Institutions.
     * @param {InstitutionDeleteManyArgs} args - Arguments to filter Institutions to delete.
     * @example
     * // Delete a few Institutions
     * const { count } = await prisma.institution.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InstitutionDeleteManyArgs>(args?: SelectSubset<T, InstitutionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Institutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Institutions
     * const institution = await prisma.institution.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InstitutionUpdateManyArgs>(args: SelectSubset<T, InstitutionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Institutions and returns the data updated in the database.
     * @param {InstitutionUpdateManyAndReturnArgs} args - Arguments to update many Institutions.
     * @example
     * // Update many Institutions
     * const institution = await prisma.institution.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Institutions and only return the `institutionId`
     * const institutionWithInstitutionIdOnly = await prisma.institution.updateManyAndReturn({
     *   select: { institutionId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InstitutionUpdateManyAndReturnArgs>(args: SelectSubset<T, InstitutionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Institution.
     * @param {InstitutionUpsertArgs} args - Arguments to update or create a Institution.
     * @example
     * // Update or create a Institution
     * const institution = await prisma.institution.upsert({
     *   create: {
     *     // ... data to create a Institution
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Institution we want to update
     *   }
     * })
     */
    upsert<T extends InstitutionUpsertArgs>(args: SelectSubset<T, InstitutionUpsertArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Institutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionCountArgs} args - Arguments to filter Institutions to count.
     * @example
     * // Count the number of Institutions
     * const count = await prisma.institution.count({
     *   where: {
     *     // ... the filter for the Institutions we want to count
     *   }
     * })
    **/
    count<T extends InstitutionCountArgs>(
      args?: Subset<T, InstitutionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InstitutionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Institution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InstitutionAggregateArgs>(args: Subset<T, InstitutionAggregateArgs>): Prisma.PrismaPromise<GetInstitutionAggregateType<T>>

    /**
     * Group by Institution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InstitutionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InstitutionGroupByArgs['orderBy'] }
        : { orderBy?: InstitutionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InstitutionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInstitutionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Institution model
   */
  readonly fields: InstitutionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Institution.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InstitutionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    institutionForms<T extends Institution$institutionFormsArgs<ExtArgs> = {}>(args?: Subset<T, Institution$institutionFormsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstitutionFormPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    AppliedInstitution<T extends Institution$AppliedInstitutionArgs<ExtArgs> = {}>(args?: Subset<T, Institution$AppliedInstitutionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppliedInstitutionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    InstitutionCategory<T extends Institution$InstitutionCategoryArgs<ExtArgs> = {}>(args?: Subset<T, Institution$InstitutionCategoryArgs<ExtArgs>>): Prisma__InstitutionCategoryClient<$Result.GetResult<Prisma.$InstitutionCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Institution model
   */
  interface InstitutionFieldRefs {
    readonly institutionId: FieldRef<"Institution", 'String'>
    readonly name: FieldRef<"Institution", 'String'>
    readonly requirementsHscGPA: FieldRef<"Institution", 'Float'>
    readonly requirementsSscGPA: FieldRef<"Institution", 'Float'>
    readonly institutionCategoryInstitutionCategoryId: FieldRef<"Institution", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Institution findUnique
   */
  export type InstitutionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionInclude<ExtArgs> | null
    /**
     * Filter, which Institution to fetch.
     */
    where: InstitutionWhereUniqueInput
  }

  /**
   * Institution findUniqueOrThrow
   */
  export type InstitutionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionInclude<ExtArgs> | null
    /**
     * Filter, which Institution to fetch.
     */
    where: InstitutionWhereUniqueInput
  }

  /**
   * Institution findFirst
   */
  export type InstitutionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionInclude<ExtArgs> | null
    /**
     * Filter, which Institution to fetch.
     */
    where?: InstitutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Institutions to fetch.
     */
    orderBy?: InstitutionOrderByWithRelationInput | InstitutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Institutions.
     */
    cursor?: InstitutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Institutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Institutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Institutions.
     */
    distinct?: InstitutionScalarFieldEnum | InstitutionScalarFieldEnum[]
  }

  /**
   * Institution findFirstOrThrow
   */
  export type InstitutionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionInclude<ExtArgs> | null
    /**
     * Filter, which Institution to fetch.
     */
    where?: InstitutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Institutions to fetch.
     */
    orderBy?: InstitutionOrderByWithRelationInput | InstitutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Institutions.
     */
    cursor?: InstitutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Institutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Institutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Institutions.
     */
    distinct?: InstitutionScalarFieldEnum | InstitutionScalarFieldEnum[]
  }

  /**
   * Institution findMany
   */
  export type InstitutionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionInclude<ExtArgs> | null
    /**
     * Filter, which Institutions to fetch.
     */
    where?: InstitutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Institutions to fetch.
     */
    orderBy?: InstitutionOrderByWithRelationInput | InstitutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Institutions.
     */
    cursor?: InstitutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Institutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Institutions.
     */
    skip?: number
    distinct?: InstitutionScalarFieldEnum | InstitutionScalarFieldEnum[]
  }

  /**
   * Institution create
   */
  export type InstitutionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionInclude<ExtArgs> | null
    /**
     * The data needed to create a Institution.
     */
    data: XOR<InstitutionCreateInput, InstitutionUncheckedCreateInput>
  }

  /**
   * Institution createMany
   */
  export type InstitutionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Institutions.
     */
    data: InstitutionCreateManyInput | InstitutionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Institution createManyAndReturn
   */
  export type InstitutionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * The data used to create many Institutions.
     */
    data: InstitutionCreateManyInput | InstitutionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Institution update
   */
  export type InstitutionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionInclude<ExtArgs> | null
    /**
     * The data needed to update a Institution.
     */
    data: XOR<InstitutionUpdateInput, InstitutionUncheckedUpdateInput>
    /**
     * Choose, which Institution to update.
     */
    where: InstitutionWhereUniqueInput
  }

  /**
   * Institution updateMany
   */
  export type InstitutionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Institutions.
     */
    data: XOR<InstitutionUpdateManyMutationInput, InstitutionUncheckedUpdateManyInput>
    /**
     * Filter which Institutions to update
     */
    where?: InstitutionWhereInput
    /**
     * Limit how many Institutions to update.
     */
    limit?: number
  }

  /**
   * Institution updateManyAndReturn
   */
  export type InstitutionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * The data used to update Institutions.
     */
    data: XOR<InstitutionUpdateManyMutationInput, InstitutionUncheckedUpdateManyInput>
    /**
     * Filter which Institutions to update
     */
    where?: InstitutionWhereInput
    /**
     * Limit how many Institutions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Institution upsert
   */
  export type InstitutionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionInclude<ExtArgs> | null
    /**
     * The filter to search for the Institution to update in case it exists.
     */
    where: InstitutionWhereUniqueInput
    /**
     * In case the Institution found by the `where` argument doesn't exist, create a new Institution with this data.
     */
    create: XOR<InstitutionCreateInput, InstitutionUncheckedCreateInput>
    /**
     * In case the Institution was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InstitutionUpdateInput, InstitutionUncheckedUpdateInput>
  }

  /**
   * Institution delete
   */
  export type InstitutionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionInclude<ExtArgs> | null
    /**
     * Filter which Institution to delete.
     */
    where: InstitutionWhereUniqueInput
  }

  /**
   * Institution deleteMany
   */
  export type InstitutionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Institutions to delete
     */
    where?: InstitutionWhereInput
    /**
     * Limit how many Institutions to delete.
     */
    limit?: number
  }

  /**
   * Institution.institutionForms
   */
  export type Institution$institutionFormsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitutionForm
     */
    select?: InstitutionFormSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstitutionForm
     */
    omit?: InstitutionFormOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionFormInclude<ExtArgs> | null
    where?: InstitutionFormWhereInput
    orderBy?: InstitutionFormOrderByWithRelationInput | InstitutionFormOrderByWithRelationInput[]
    cursor?: InstitutionFormWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InstitutionFormScalarFieldEnum | InstitutionFormScalarFieldEnum[]
  }

  /**
   * Institution.AppliedInstitution
   */
  export type Institution$AppliedInstitutionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppliedInstitution
     */
    select?: AppliedInstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppliedInstitution
     */
    omit?: AppliedInstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppliedInstitutionInclude<ExtArgs> | null
    where?: AppliedInstitutionWhereInput
    orderBy?: AppliedInstitutionOrderByWithRelationInput | AppliedInstitutionOrderByWithRelationInput[]
    cursor?: AppliedInstitutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppliedInstitutionScalarFieldEnum | AppliedInstitutionScalarFieldEnum[]
  }

  /**
   * Institution.InstitutionCategory
   */
  export type Institution$InstitutionCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitutionCategory
     */
    select?: InstitutionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstitutionCategory
     */
    omit?: InstitutionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionCategoryInclude<ExtArgs> | null
    where?: InstitutionCategoryWhereInput
  }

  /**
   * Institution without action
   */
  export type InstitutionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionInclude<ExtArgs> | null
  }


  /**
   * Model InstitutionCategory
   */

  export type AggregateInstitutionCategory = {
    _count: InstitutionCategoryCountAggregateOutputType | null
    _min: InstitutionCategoryMinAggregateOutputType | null
    _max: InstitutionCategoryMaxAggregateOutputType | null
  }

  export type InstitutionCategoryMinAggregateOutputType = {
    institutionCategoryId: string | null
    name: string | null
    description: string | null
  }

  export type InstitutionCategoryMaxAggregateOutputType = {
    institutionCategoryId: string | null
    name: string | null
    description: string | null
  }

  export type InstitutionCategoryCountAggregateOutputType = {
    institutionCategoryId: number
    name: number
    description: number
    _all: number
  }


  export type InstitutionCategoryMinAggregateInputType = {
    institutionCategoryId?: true
    name?: true
    description?: true
  }

  export type InstitutionCategoryMaxAggregateInputType = {
    institutionCategoryId?: true
    name?: true
    description?: true
  }

  export type InstitutionCategoryCountAggregateInputType = {
    institutionCategoryId?: true
    name?: true
    description?: true
    _all?: true
  }

  export type InstitutionCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InstitutionCategory to aggregate.
     */
    where?: InstitutionCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InstitutionCategories to fetch.
     */
    orderBy?: InstitutionCategoryOrderByWithRelationInput | InstitutionCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InstitutionCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InstitutionCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InstitutionCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InstitutionCategories
    **/
    _count?: true | InstitutionCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InstitutionCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InstitutionCategoryMaxAggregateInputType
  }

  export type GetInstitutionCategoryAggregateType<T extends InstitutionCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateInstitutionCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInstitutionCategory[P]>
      : GetScalarType<T[P], AggregateInstitutionCategory[P]>
  }




  export type InstitutionCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InstitutionCategoryWhereInput
    orderBy?: InstitutionCategoryOrderByWithAggregationInput | InstitutionCategoryOrderByWithAggregationInput[]
    by: InstitutionCategoryScalarFieldEnum[] | InstitutionCategoryScalarFieldEnum
    having?: InstitutionCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InstitutionCategoryCountAggregateInputType | true
    _min?: InstitutionCategoryMinAggregateInputType
    _max?: InstitutionCategoryMaxAggregateInputType
  }

  export type InstitutionCategoryGroupByOutputType = {
    institutionCategoryId: string
    name: string
    description: string
    _count: InstitutionCategoryCountAggregateOutputType | null
    _min: InstitutionCategoryMinAggregateOutputType | null
    _max: InstitutionCategoryMaxAggregateOutputType | null
  }

  type GetInstitutionCategoryGroupByPayload<T extends InstitutionCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InstitutionCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InstitutionCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InstitutionCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], InstitutionCategoryGroupByOutputType[P]>
        }
      >
    >


  export type InstitutionCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    institutionCategoryId?: boolean
    name?: boolean
    description?: boolean
    institutions?: boolean | InstitutionCategory$institutionsArgs<ExtArgs>
    _count?: boolean | InstitutionCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["institutionCategory"]>

  export type InstitutionCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    institutionCategoryId?: boolean
    name?: boolean
    description?: boolean
  }, ExtArgs["result"]["institutionCategory"]>

  export type InstitutionCategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    institutionCategoryId?: boolean
    name?: boolean
    description?: boolean
  }, ExtArgs["result"]["institutionCategory"]>

  export type InstitutionCategorySelectScalar = {
    institutionCategoryId?: boolean
    name?: boolean
    description?: boolean
  }

  export type InstitutionCategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"institutionCategoryId" | "name" | "description", ExtArgs["result"]["institutionCategory"]>
  export type InstitutionCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    institutions?: boolean | InstitutionCategory$institutionsArgs<ExtArgs>
    _count?: boolean | InstitutionCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InstitutionCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type InstitutionCategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $InstitutionCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InstitutionCategory"
    objects: {
      institutions: Prisma.$InstitutionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      institutionCategoryId: string
      name: string
      description: string
    }, ExtArgs["result"]["institutionCategory"]>
    composites: {}
  }

  type InstitutionCategoryGetPayload<S extends boolean | null | undefined | InstitutionCategoryDefaultArgs> = $Result.GetResult<Prisma.$InstitutionCategoryPayload, S>

  type InstitutionCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InstitutionCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InstitutionCategoryCountAggregateInputType | true
    }

  export interface InstitutionCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InstitutionCategory'], meta: { name: 'InstitutionCategory' } }
    /**
     * Find zero or one InstitutionCategory that matches the filter.
     * @param {InstitutionCategoryFindUniqueArgs} args - Arguments to find a InstitutionCategory
     * @example
     * // Get one InstitutionCategory
     * const institutionCategory = await prisma.institutionCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InstitutionCategoryFindUniqueArgs>(args: SelectSubset<T, InstitutionCategoryFindUniqueArgs<ExtArgs>>): Prisma__InstitutionCategoryClient<$Result.GetResult<Prisma.$InstitutionCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InstitutionCategory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InstitutionCategoryFindUniqueOrThrowArgs} args - Arguments to find a InstitutionCategory
     * @example
     * // Get one InstitutionCategory
     * const institutionCategory = await prisma.institutionCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InstitutionCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, InstitutionCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InstitutionCategoryClient<$Result.GetResult<Prisma.$InstitutionCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InstitutionCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionCategoryFindFirstArgs} args - Arguments to find a InstitutionCategory
     * @example
     * // Get one InstitutionCategory
     * const institutionCategory = await prisma.institutionCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InstitutionCategoryFindFirstArgs>(args?: SelectSubset<T, InstitutionCategoryFindFirstArgs<ExtArgs>>): Prisma__InstitutionCategoryClient<$Result.GetResult<Prisma.$InstitutionCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InstitutionCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionCategoryFindFirstOrThrowArgs} args - Arguments to find a InstitutionCategory
     * @example
     * // Get one InstitutionCategory
     * const institutionCategory = await prisma.institutionCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InstitutionCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, InstitutionCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__InstitutionCategoryClient<$Result.GetResult<Prisma.$InstitutionCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InstitutionCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InstitutionCategories
     * const institutionCategories = await prisma.institutionCategory.findMany()
     * 
     * // Get first 10 InstitutionCategories
     * const institutionCategories = await prisma.institutionCategory.findMany({ take: 10 })
     * 
     * // Only select the `institutionCategoryId`
     * const institutionCategoryWithInstitutionCategoryIdOnly = await prisma.institutionCategory.findMany({ select: { institutionCategoryId: true } })
     * 
     */
    findMany<T extends InstitutionCategoryFindManyArgs>(args?: SelectSubset<T, InstitutionCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstitutionCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InstitutionCategory.
     * @param {InstitutionCategoryCreateArgs} args - Arguments to create a InstitutionCategory.
     * @example
     * // Create one InstitutionCategory
     * const InstitutionCategory = await prisma.institutionCategory.create({
     *   data: {
     *     // ... data to create a InstitutionCategory
     *   }
     * })
     * 
     */
    create<T extends InstitutionCategoryCreateArgs>(args: SelectSubset<T, InstitutionCategoryCreateArgs<ExtArgs>>): Prisma__InstitutionCategoryClient<$Result.GetResult<Prisma.$InstitutionCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InstitutionCategories.
     * @param {InstitutionCategoryCreateManyArgs} args - Arguments to create many InstitutionCategories.
     * @example
     * // Create many InstitutionCategories
     * const institutionCategory = await prisma.institutionCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InstitutionCategoryCreateManyArgs>(args?: SelectSubset<T, InstitutionCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InstitutionCategories and returns the data saved in the database.
     * @param {InstitutionCategoryCreateManyAndReturnArgs} args - Arguments to create many InstitutionCategories.
     * @example
     * // Create many InstitutionCategories
     * const institutionCategory = await prisma.institutionCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InstitutionCategories and only return the `institutionCategoryId`
     * const institutionCategoryWithInstitutionCategoryIdOnly = await prisma.institutionCategory.createManyAndReturn({
     *   select: { institutionCategoryId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InstitutionCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, InstitutionCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstitutionCategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InstitutionCategory.
     * @param {InstitutionCategoryDeleteArgs} args - Arguments to delete one InstitutionCategory.
     * @example
     * // Delete one InstitutionCategory
     * const InstitutionCategory = await prisma.institutionCategory.delete({
     *   where: {
     *     // ... filter to delete one InstitutionCategory
     *   }
     * })
     * 
     */
    delete<T extends InstitutionCategoryDeleteArgs>(args: SelectSubset<T, InstitutionCategoryDeleteArgs<ExtArgs>>): Prisma__InstitutionCategoryClient<$Result.GetResult<Prisma.$InstitutionCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InstitutionCategory.
     * @param {InstitutionCategoryUpdateArgs} args - Arguments to update one InstitutionCategory.
     * @example
     * // Update one InstitutionCategory
     * const institutionCategory = await prisma.institutionCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InstitutionCategoryUpdateArgs>(args: SelectSubset<T, InstitutionCategoryUpdateArgs<ExtArgs>>): Prisma__InstitutionCategoryClient<$Result.GetResult<Prisma.$InstitutionCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InstitutionCategories.
     * @param {InstitutionCategoryDeleteManyArgs} args - Arguments to filter InstitutionCategories to delete.
     * @example
     * // Delete a few InstitutionCategories
     * const { count } = await prisma.institutionCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InstitutionCategoryDeleteManyArgs>(args?: SelectSubset<T, InstitutionCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InstitutionCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InstitutionCategories
     * const institutionCategory = await prisma.institutionCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InstitutionCategoryUpdateManyArgs>(args: SelectSubset<T, InstitutionCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InstitutionCategories and returns the data updated in the database.
     * @param {InstitutionCategoryUpdateManyAndReturnArgs} args - Arguments to update many InstitutionCategories.
     * @example
     * // Update many InstitutionCategories
     * const institutionCategory = await prisma.institutionCategory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InstitutionCategories and only return the `institutionCategoryId`
     * const institutionCategoryWithInstitutionCategoryIdOnly = await prisma.institutionCategory.updateManyAndReturn({
     *   select: { institutionCategoryId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InstitutionCategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, InstitutionCategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstitutionCategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InstitutionCategory.
     * @param {InstitutionCategoryUpsertArgs} args - Arguments to update or create a InstitutionCategory.
     * @example
     * // Update or create a InstitutionCategory
     * const institutionCategory = await prisma.institutionCategory.upsert({
     *   create: {
     *     // ... data to create a InstitutionCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InstitutionCategory we want to update
     *   }
     * })
     */
    upsert<T extends InstitutionCategoryUpsertArgs>(args: SelectSubset<T, InstitutionCategoryUpsertArgs<ExtArgs>>): Prisma__InstitutionCategoryClient<$Result.GetResult<Prisma.$InstitutionCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InstitutionCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionCategoryCountArgs} args - Arguments to filter InstitutionCategories to count.
     * @example
     * // Count the number of InstitutionCategories
     * const count = await prisma.institutionCategory.count({
     *   where: {
     *     // ... the filter for the InstitutionCategories we want to count
     *   }
     * })
    **/
    count<T extends InstitutionCategoryCountArgs>(
      args?: Subset<T, InstitutionCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InstitutionCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InstitutionCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InstitutionCategoryAggregateArgs>(args: Subset<T, InstitutionCategoryAggregateArgs>): Prisma.PrismaPromise<GetInstitutionCategoryAggregateType<T>>

    /**
     * Group by InstitutionCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InstitutionCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InstitutionCategoryGroupByArgs['orderBy'] }
        : { orderBy?: InstitutionCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InstitutionCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInstitutionCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InstitutionCategory model
   */
  readonly fields: InstitutionCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InstitutionCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InstitutionCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    institutions<T extends InstitutionCategory$institutionsArgs<ExtArgs> = {}>(args?: Subset<T, InstitutionCategory$institutionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InstitutionCategory model
   */
  interface InstitutionCategoryFieldRefs {
    readonly institutionCategoryId: FieldRef<"InstitutionCategory", 'String'>
    readonly name: FieldRef<"InstitutionCategory", 'String'>
    readonly description: FieldRef<"InstitutionCategory", 'String'>
  }
    

  // Custom InputTypes
  /**
   * InstitutionCategory findUnique
   */
  export type InstitutionCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitutionCategory
     */
    select?: InstitutionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstitutionCategory
     */
    omit?: InstitutionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which InstitutionCategory to fetch.
     */
    where: InstitutionCategoryWhereUniqueInput
  }

  /**
   * InstitutionCategory findUniqueOrThrow
   */
  export type InstitutionCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitutionCategory
     */
    select?: InstitutionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstitutionCategory
     */
    omit?: InstitutionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which InstitutionCategory to fetch.
     */
    where: InstitutionCategoryWhereUniqueInput
  }

  /**
   * InstitutionCategory findFirst
   */
  export type InstitutionCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitutionCategory
     */
    select?: InstitutionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstitutionCategory
     */
    omit?: InstitutionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which InstitutionCategory to fetch.
     */
    where?: InstitutionCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InstitutionCategories to fetch.
     */
    orderBy?: InstitutionCategoryOrderByWithRelationInput | InstitutionCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InstitutionCategories.
     */
    cursor?: InstitutionCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InstitutionCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InstitutionCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InstitutionCategories.
     */
    distinct?: InstitutionCategoryScalarFieldEnum | InstitutionCategoryScalarFieldEnum[]
  }

  /**
   * InstitutionCategory findFirstOrThrow
   */
  export type InstitutionCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitutionCategory
     */
    select?: InstitutionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstitutionCategory
     */
    omit?: InstitutionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which InstitutionCategory to fetch.
     */
    where?: InstitutionCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InstitutionCategories to fetch.
     */
    orderBy?: InstitutionCategoryOrderByWithRelationInput | InstitutionCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InstitutionCategories.
     */
    cursor?: InstitutionCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InstitutionCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InstitutionCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InstitutionCategories.
     */
    distinct?: InstitutionCategoryScalarFieldEnum | InstitutionCategoryScalarFieldEnum[]
  }

  /**
   * InstitutionCategory findMany
   */
  export type InstitutionCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitutionCategory
     */
    select?: InstitutionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstitutionCategory
     */
    omit?: InstitutionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which InstitutionCategories to fetch.
     */
    where?: InstitutionCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InstitutionCategories to fetch.
     */
    orderBy?: InstitutionCategoryOrderByWithRelationInput | InstitutionCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InstitutionCategories.
     */
    cursor?: InstitutionCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InstitutionCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InstitutionCategories.
     */
    skip?: number
    distinct?: InstitutionCategoryScalarFieldEnum | InstitutionCategoryScalarFieldEnum[]
  }

  /**
   * InstitutionCategory create
   */
  export type InstitutionCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitutionCategory
     */
    select?: InstitutionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstitutionCategory
     */
    omit?: InstitutionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a InstitutionCategory.
     */
    data: XOR<InstitutionCategoryCreateInput, InstitutionCategoryUncheckedCreateInput>
  }

  /**
   * InstitutionCategory createMany
   */
  export type InstitutionCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InstitutionCategories.
     */
    data: InstitutionCategoryCreateManyInput | InstitutionCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InstitutionCategory createManyAndReturn
   */
  export type InstitutionCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitutionCategory
     */
    select?: InstitutionCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InstitutionCategory
     */
    omit?: InstitutionCategoryOmit<ExtArgs> | null
    /**
     * The data used to create many InstitutionCategories.
     */
    data: InstitutionCategoryCreateManyInput | InstitutionCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InstitutionCategory update
   */
  export type InstitutionCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitutionCategory
     */
    select?: InstitutionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstitutionCategory
     */
    omit?: InstitutionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a InstitutionCategory.
     */
    data: XOR<InstitutionCategoryUpdateInput, InstitutionCategoryUncheckedUpdateInput>
    /**
     * Choose, which InstitutionCategory to update.
     */
    where: InstitutionCategoryWhereUniqueInput
  }

  /**
   * InstitutionCategory updateMany
   */
  export type InstitutionCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InstitutionCategories.
     */
    data: XOR<InstitutionCategoryUpdateManyMutationInput, InstitutionCategoryUncheckedUpdateManyInput>
    /**
     * Filter which InstitutionCategories to update
     */
    where?: InstitutionCategoryWhereInput
    /**
     * Limit how many InstitutionCategories to update.
     */
    limit?: number
  }

  /**
   * InstitutionCategory updateManyAndReturn
   */
  export type InstitutionCategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitutionCategory
     */
    select?: InstitutionCategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InstitutionCategory
     */
    omit?: InstitutionCategoryOmit<ExtArgs> | null
    /**
     * The data used to update InstitutionCategories.
     */
    data: XOR<InstitutionCategoryUpdateManyMutationInput, InstitutionCategoryUncheckedUpdateManyInput>
    /**
     * Filter which InstitutionCategories to update
     */
    where?: InstitutionCategoryWhereInput
    /**
     * Limit how many InstitutionCategories to update.
     */
    limit?: number
  }

  /**
   * InstitutionCategory upsert
   */
  export type InstitutionCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitutionCategory
     */
    select?: InstitutionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstitutionCategory
     */
    omit?: InstitutionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the InstitutionCategory to update in case it exists.
     */
    where: InstitutionCategoryWhereUniqueInput
    /**
     * In case the InstitutionCategory found by the `where` argument doesn't exist, create a new InstitutionCategory with this data.
     */
    create: XOR<InstitutionCategoryCreateInput, InstitutionCategoryUncheckedCreateInput>
    /**
     * In case the InstitutionCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InstitutionCategoryUpdateInput, InstitutionCategoryUncheckedUpdateInput>
  }

  /**
   * InstitutionCategory delete
   */
  export type InstitutionCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitutionCategory
     */
    select?: InstitutionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstitutionCategory
     */
    omit?: InstitutionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionCategoryInclude<ExtArgs> | null
    /**
     * Filter which InstitutionCategory to delete.
     */
    where: InstitutionCategoryWhereUniqueInput
  }

  /**
   * InstitutionCategory deleteMany
   */
  export type InstitutionCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InstitutionCategories to delete
     */
    where?: InstitutionCategoryWhereInput
    /**
     * Limit how many InstitutionCategories to delete.
     */
    limit?: number
  }

  /**
   * InstitutionCategory.institutions
   */
  export type InstitutionCategory$institutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Institution
     */
    omit?: InstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionInclude<ExtArgs> | null
    where?: InstitutionWhereInput
    orderBy?: InstitutionOrderByWithRelationInput | InstitutionOrderByWithRelationInput[]
    cursor?: InstitutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InstitutionScalarFieldEnum | InstitutionScalarFieldEnum[]
  }

  /**
   * InstitutionCategory without action
   */
  export type InstitutionCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitutionCategory
     */
    select?: InstitutionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstitutionCategory
     */
    omit?: InstitutionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionCategoryInclude<ExtArgs> | null
  }


  /**
   * Model InstitutionForm
   */

  export type AggregateInstitutionForm = {
    _count: InstitutionFormCountAggregateOutputType | null
    _min: InstitutionFormMinAggregateOutputType | null
    _max: InstitutionFormMaxAggregateOutputType | null
  }

  export type InstitutionFormMinAggregateOutputType = {
    institutionFormId: string | null
    institutionId: string | null
    fieldName: string | null
    fieldType: string | null
    isRequired: boolean | null
  }

  export type InstitutionFormMaxAggregateOutputType = {
    institutionFormId: string | null
    institutionId: string | null
    fieldName: string | null
    fieldType: string | null
    isRequired: boolean | null
  }

  export type InstitutionFormCountAggregateOutputType = {
    institutionFormId: number
    institutionId: number
    fieldName: number
    fieldType: number
    isRequired: number
    _all: number
  }


  export type InstitutionFormMinAggregateInputType = {
    institutionFormId?: true
    institutionId?: true
    fieldName?: true
    fieldType?: true
    isRequired?: true
  }

  export type InstitutionFormMaxAggregateInputType = {
    institutionFormId?: true
    institutionId?: true
    fieldName?: true
    fieldType?: true
    isRequired?: true
  }

  export type InstitutionFormCountAggregateInputType = {
    institutionFormId?: true
    institutionId?: true
    fieldName?: true
    fieldType?: true
    isRequired?: true
    _all?: true
  }

  export type InstitutionFormAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InstitutionForm to aggregate.
     */
    where?: InstitutionFormWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InstitutionForms to fetch.
     */
    orderBy?: InstitutionFormOrderByWithRelationInput | InstitutionFormOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InstitutionFormWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InstitutionForms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InstitutionForms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InstitutionForms
    **/
    _count?: true | InstitutionFormCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InstitutionFormMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InstitutionFormMaxAggregateInputType
  }

  export type GetInstitutionFormAggregateType<T extends InstitutionFormAggregateArgs> = {
        [P in keyof T & keyof AggregateInstitutionForm]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInstitutionForm[P]>
      : GetScalarType<T[P], AggregateInstitutionForm[P]>
  }




  export type InstitutionFormGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InstitutionFormWhereInput
    orderBy?: InstitutionFormOrderByWithAggregationInput | InstitutionFormOrderByWithAggregationInput[]
    by: InstitutionFormScalarFieldEnum[] | InstitutionFormScalarFieldEnum
    having?: InstitutionFormScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InstitutionFormCountAggregateInputType | true
    _min?: InstitutionFormMinAggregateInputType
    _max?: InstitutionFormMaxAggregateInputType
  }

  export type InstitutionFormGroupByOutputType = {
    institutionFormId: string
    institutionId: string
    fieldName: string
    fieldType: string
    isRequired: boolean
    _count: InstitutionFormCountAggregateOutputType | null
    _min: InstitutionFormMinAggregateOutputType | null
    _max: InstitutionFormMaxAggregateOutputType | null
  }

  type GetInstitutionFormGroupByPayload<T extends InstitutionFormGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InstitutionFormGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InstitutionFormGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InstitutionFormGroupByOutputType[P]>
            : GetScalarType<T[P], InstitutionFormGroupByOutputType[P]>
        }
      >
    >


  export type InstitutionFormSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    institutionFormId?: boolean
    institutionId?: boolean
    fieldName?: boolean
    fieldType?: boolean
    isRequired?: boolean
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["institutionForm"]>

  export type InstitutionFormSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    institutionFormId?: boolean
    institutionId?: boolean
    fieldName?: boolean
    fieldType?: boolean
    isRequired?: boolean
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["institutionForm"]>

  export type InstitutionFormSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    institutionFormId?: boolean
    institutionId?: boolean
    fieldName?: boolean
    fieldType?: boolean
    isRequired?: boolean
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["institutionForm"]>

  export type InstitutionFormSelectScalar = {
    institutionFormId?: boolean
    institutionId?: boolean
    fieldName?: boolean
    fieldType?: boolean
    isRequired?: boolean
  }

  export type InstitutionFormOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"institutionFormId" | "institutionId" | "fieldName" | "fieldType" | "isRequired", ExtArgs["result"]["institutionForm"]>
  export type InstitutionFormInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }
  export type InstitutionFormIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }
  export type InstitutionFormIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }

  export type $InstitutionFormPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InstitutionForm"
    objects: {
      institution: Prisma.$InstitutionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      institutionFormId: string
      institutionId: string
      fieldName: string
      fieldType: string
      isRequired: boolean
    }, ExtArgs["result"]["institutionForm"]>
    composites: {}
  }

  type InstitutionFormGetPayload<S extends boolean | null | undefined | InstitutionFormDefaultArgs> = $Result.GetResult<Prisma.$InstitutionFormPayload, S>

  type InstitutionFormCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InstitutionFormFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InstitutionFormCountAggregateInputType | true
    }

  export interface InstitutionFormDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InstitutionForm'], meta: { name: 'InstitutionForm' } }
    /**
     * Find zero or one InstitutionForm that matches the filter.
     * @param {InstitutionFormFindUniqueArgs} args - Arguments to find a InstitutionForm
     * @example
     * // Get one InstitutionForm
     * const institutionForm = await prisma.institutionForm.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InstitutionFormFindUniqueArgs>(args: SelectSubset<T, InstitutionFormFindUniqueArgs<ExtArgs>>): Prisma__InstitutionFormClient<$Result.GetResult<Prisma.$InstitutionFormPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InstitutionForm that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InstitutionFormFindUniqueOrThrowArgs} args - Arguments to find a InstitutionForm
     * @example
     * // Get one InstitutionForm
     * const institutionForm = await prisma.institutionForm.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InstitutionFormFindUniqueOrThrowArgs>(args: SelectSubset<T, InstitutionFormFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InstitutionFormClient<$Result.GetResult<Prisma.$InstitutionFormPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InstitutionForm that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionFormFindFirstArgs} args - Arguments to find a InstitutionForm
     * @example
     * // Get one InstitutionForm
     * const institutionForm = await prisma.institutionForm.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InstitutionFormFindFirstArgs>(args?: SelectSubset<T, InstitutionFormFindFirstArgs<ExtArgs>>): Prisma__InstitutionFormClient<$Result.GetResult<Prisma.$InstitutionFormPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InstitutionForm that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionFormFindFirstOrThrowArgs} args - Arguments to find a InstitutionForm
     * @example
     * // Get one InstitutionForm
     * const institutionForm = await prisma.institutionForm.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InstitutionFormFindFirstOrThrowArgs>(args?: SelectSubset<T, InstitutionFormFindFirstOrThrowArgs<ExtArgs>>): Prisma__InstitutionFormClient<$Result.GetResult<Prisma.$InstitutionFormPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InstitutionForms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionFormFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InstitutionForms
     * const institutionForms = await prisma.institutionForm.findMany()
     * 
     * // Get first 10 InstitutionForms
     * const institutionForms = await prisma.institutionForm.findMany({ take: 10 })
     * 
     * // Only select the `institutionFormId`
     * const institutionFormWithInstitutionFormIdOnly = await prisma.institutionForm.findMany({ select: { institutionFormId: true } })
     * 
     */
    findMany<T extends InstitutionFormFindManyArgs>(args?: SelectSubset<T, InstitutionFormFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstitutionFormPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InstitutionForm.
     * @param {InstitutionFormCreateArgs} args - Arguments to create a InstitutionForm.
     * @example
     * // Create one InstitutionForm
     * const InstitutionForm = await prisma.institutionForm.create({
     *   data: {
     *     // ... data to create a InstitutionForm
     *   }
     * })
     * 
     */
    create<T extends InstitutionFormCreateArgs>(args: SelectSubset<T, InstitutionFormCreateArgs<ExtArgs>>): Prisma__InstitutionFormClient<$Result.GetResult<Prisma.$InstitutionFormPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InstitutionForms.
     * @param {InstitutionFormCreateManyArgs} args - Arguments to create many InstitutionForms.
     * @example
     * // Create many InstitutionForms
     * const institutionForm = await prisma.institutionForm.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InstitutionFormCreateManyArgs>(args?: SelectSubset<T, InstitutionFormCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InstitutionForms and returns the data saved in the database.
     * @param {InstitutionFormCreateManyAndReturnArgs} args - Arguments to create many InstitutionForms.
     * @example
     * // Create many InstitutionForms
     * const institutionForm = await prisma.institutionForm.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InstitutionForms and only return the `institutionFormId`
     * const institutionFormWithInstitutionFormIdOnly = await prisma.institutionForm.createManyAndReturn({
     *   select: { institutionFormId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InstitutionFormCreateManyAndReturnArgs>(args?: SelectSubset<T, InstitutionFormCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstitutionFormPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InstitutionForm.
     * @param {InstitutionFormDeleteArgs} args - Arguments to delete one InstitutionForm.
     * @example
     * // Delete one InstitutionForm
     * const InstitutionForm = await prisma.institutionForm.delete({
     *   where: {
     *     // ... filter to delete one InstitutionForm
     *   }
     * })
     * 
     */
    delete<T extends InstitutionFormDeleteArgs>(args: SelectSubset<T, InstitutionFormDeleteArgs<ExtArgs>>): Prisma__InstitutionFormClient<$Result.GetResult<Prisma.$InstitutionFormPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InstitutionForm.
     * @param {InstitutionFormUpdateArgs} args - Arguments to update one InstitutionForm.
     * @example
     * // Update one InstitutionForm
     * const institutionForm = await prisma.institutionForm.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InstitutionFormUpdateArgs>(args: SelectSubset<T, InstitutionFormUpdateArgs<ExtArgs>>): Prisma__InstitutionFormClient<$Result.GetResult<Prisma.$InstitutionFormPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InstitutionForms.
     * @param {InstitutionFormDeleteManyArgs} args - Arguments to filter InstitutionForms to delete.
     * @example
     * // Delete a few InstitutionForms
     * const { count } = await prisma.institutionForm.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InstitutionFormDeleteManyArgs>(args?: SelectSubset<T, InstitutionFormDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InstitutionForms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionFormUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InstitutionForms
     * const institutionForm = await prisma.institutionForm.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InstitutionFormUpdateManyArgs>(args: SelectSubset<T, InstitutionFormUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InstitutionForms and returns the data updated in the database.
     * @param {InstitutionFormUpdateManyAndReturnArgs} args - Arguments to update many InstitutionForms.
     * @example
     * // Update many InstitutionForms
     * const institutionForm = await prisma.institutionForm.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InstitutionForms and only return the `institutionFormId`
     * const institutionFormWithInstitutionFormIdOnly = await prisma.institutionForm.updateManyAndReturn({
     *   select: { institutionFormId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InstitutionFormUpdateManyAndReturnArgs>(args: SelectSubset<T, InstitutionFormUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstitutionFormPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InstitutionForm.
     * @param {InstitutionFormUpsertArgs} args - Arguments to update or create a InstitutionForm.
     * @example
     * // Update or create a InstitutionForm
     * const institutionForm = await prisma.institutionForm.upsert({
     *   create: {
     *     // ... data to create a InstitutionForm
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InstitutionForm we want to update
     *   }
     * })
     */
    upsert<T extends InstitutionFormUpsertArgs>(args: SelectSubset<T, InstitutionFormUpsertArgs<ExtArgs>>): Prisma__InstitutionFormClient<$Result.GetResult<Prisma.$InstitutionFormPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InstitutionForms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionFormCountArgs} args - Arguments to filter InstitutionForms to count.
     * @example
     * // Count the number of InstitutionForms
     * const count = await prisma.institutionForm.count({
     *   where: {
     *     // ... the filter for the InstitutionForms we want to count
     *   }
     * })
    **/
    count<T extends InstitutionFormCountArgs>(
      args?: Subset<T, InstitutionFormCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InstitutionFormCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InstitutionForm.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionFormAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InstitutionFormAggregateArgs>(args: Subset<T, InstitutionFormAggregateArgs>): Prisma.PrismaPromise<GetInstitutionFormAggregateType<T>>

    /**
     * Group by InstitutionForm.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionFormGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InstitutionFormGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InstitutionFormGroupByArgs['orderBy'] }
        : { orderBy?: InstitutionFormGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InstitutionFormGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInstitutionFormGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InstitutionForm model
   */
  readonly fields: InstitutionFormFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InstitutionForm.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InstitutionFormClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    institution<T extends InstitutionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstitutionDefaultArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InstitutionForm model
   */
  interface InstitutionFormFieldRefs {
    readonly institutionFormId: FieldRef<"InstitutionForm", 'String'>
    readonly institutionId: FieldRef<"InstitutionForm", 'String'>
    readonly fieldName: FieldRef<"InstitutionForm", 'String'>
    readonly fieldType: FieldRef<"InstitutionForm", 'String'>
    readonly isRequired: FieldRef<"InstitutionForm", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * InstitutionForm findUnique
   */
  export type InstitutionFormFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitutionForm
     */
    select?: InstitutionFormSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstitutionForm
     */
    omit?: InstitutionFormOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionFormInclude<ExtArgs> | null
    /**
     * Filter, which InstitutionForm to fetch.
     */
    where: InstitutionFormWhereUniqueInput
  }

  /**
   * InstitutionForm findUniqueOrThrow
   */
  export type InstitutionFormFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitutionForm
     */
    select?: InstitutionFormSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstitutionForm
     */
    omit?: InstitutionFormOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionFormInclude<ExtArgs> | null
    /**
     * Filter, which InstitutionForm to fetch.
     */
    where: InstitutionFormWhereUniqueInput
  }

  /**
   * InstitutionForm findFirst
   */
  export type InstitutionFormFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitutionForm
     */
    select?: InstitutionFormSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstitutionForm
     */
    omit?: InstitutionFormOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionFormInclude<ExtArgs> | null
    /**
     * Filter, which InstitutionForm to fetch.
     */
    where?: InstitutionFormWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InstitutionForms to fetch.
     */
    orderBy?: InstitutionFormOrderByWithRelationInput | InstitutionFormOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InstitutionForms.
     */
    cursor?: InstitutionFormWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InstitutionForms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InstitutionForms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InstitutionForms.
     */
    distinct?: InstitutionFormScalarFieldEnum | InstitutionFormScalarFieldEnum[]
  }

  /**
   * InstitutionForm findFirstOrThrow
   */
  export type InstitutionFormFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitutionForm
     */
    select?: InstitutionFormSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstitutionForm
     */
    omit?: InstitutionFormOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionFormInclude<ExtArgs> | null
    /**
     * Filter, which InstitutionForm to fetch.
     */
    where?: InstitutionFormWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InstitutionForms to fetch.
     */
    orderBy?: InstitutionFormOrderByWithRelationInput | InstitutionFormOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InstitutionForms.
     */
    cursor?: InstitutionFormWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InstitutionForms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InstitutionForms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InstitutionForms.
     */
    distinct?: InstitutionFormScalarFieldEnum | InstitutionFormScalarFieldEnum[]
  }

  /**
   * InstitutionForm findMany
   */
  export type InstitutionFormFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitutionForm
     */
    select?: InstitutionFormSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstitutionForm
     */
    omit?: InstitutionFormOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionFormInclude<ExtArgs> | null
    /**
     * Filter, which InstitutionForms to fetch.
     */
    where?: InstitutionFormWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InstitutionForms to fetch.
     */
    orderBy?: InstitutionFormOrderByWithRelationInput | InstitutionFormOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InstitutionForms.
     */
    cursor?: InstitutionFormWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InstitutionForms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InstitutionForms.
     */
    skip?: number
    distinct?: InstitutionFormScalarFieldEnum | InstitutionFormScalarFieldEnum[]
  }

  /**
   * InstitutionForm create
   */
  export type InstitutionFormCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitutionForm
     */
    select?: InstitutionFormSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstitutionForm
     */
    omit?: InstitutionFormOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionFormInclude<ExtArgs> | null
    /**
     * The data needed to create a InstitutionForm.
     */
    data: XOR<InstitutionFormCreateInput, InstitutionFormUncheckedCreateInput>
  }

  /**
   * InstitutionForm createMany
   */
  export type InstitutionFormCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InstitutionForms.
     */
    data: InstitutionFormCreateManyInput | InstitutionFormCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InstitutionForm createManyAndReturn
   */
  export type InstitutionFormCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitutionForm
     */
    select?: InstitutionFormSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InstitutionForm
     */
    omit?: InstitutionFormOmit<ExtArgs> | null
    /**
     * The data used to create many InstitutionForms.
     */
    data: InstitutionFormCreateManyInput | InstitutionFormCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionFormIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InstitutionForm update
   */
  export type InstitutionFormUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitutionForm
     */
    select?: InstitutionFormSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstitutionForm
     */
    omit?: InstitutionFormOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionFormInclude<ExtArgs> | null
    /**
     * The data needed to update a InstitutionForm.
     */
    data: XOR<InstitutionFormUpdateInput, InstitutionFormUncheckedUpdateInput>
    /**
     * Choose, which InstitutionForm to update.
     */
    where: InstitutionFormWhereUniqueInput
  }

  /**
   * InstitutionForm updateMany
   */
  export type InstitutionFormUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InstitutionForms.
     */
    data: XOR<InstitutionFormUpdateManyMutationInput, InstitutionFormUncheckedUpdateManyInput>
    /**
     * Filter which InstitutionForms to update
     */
    where?: InstitutionFormWhereInput
    /**
     * Limit how many InstitutionForms to update.
     */
    limit?: number
  }

  /**
   * InstitutionForm updateManyAndReturn
   */
  export type InstitutionFormUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitutionForm
     */
    select?: InstitutionFormSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InstitutionForm
     */
    omit?: InstitutionFormOmit<ExtArgs> | null
    /**
     * The data used to update InstitutionForms.
     */
    data: XOR<InstitutionFormUpdateManyMutationInput, InstitutionFormUncheckedUpdateManyInput>
    /**
     * Filter which InstitutionForms to update
     */
    where?: InstitutionFormWhereInput
    /**
     * Limit how many InstitutionForms to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionFormIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * InstitutionForm upsert
   */
  export type InstitutionFormUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitutionForm
     */
    select?: InstitutionFormSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstitutionForm
     */
    omit?: InstitutionFormOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionFormInclude<ExtArgs> | null
    /**
     * The filter to search for the InstitutionForm to update in case it exists.
     */
    where: InstitutionFormWhereUniqueInput
    /**
     * In case the InstitutionForm found by the `where` argument doesn't exist, create a new InstitutionForm with this data.
     */
    create: XOR<InstitutionFormCreateInput, InstitutionFormUncheckedCreateInput>
    /**
     * In case the InstitutionForm was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InstitutionFormUpdateInput, InstitutionFormUncheckedUpdateInput>
  }

  /**
   * InstitutionForm delete
   */
  export type InstitutionFormDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitutionForm
     */
    select?: InstitutionFormSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstitutionForm
     */
    omit?: InstitutionFormOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionFormInclude<ExtArgs> | null
    /**
     * Filter which InstitutionForm to delete.
     */
    where: InstitutionFormWhereUniqueInput
  }

  /**
   * InstitutionForm deleteMany
   */
  export type InstitutionFormDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InstitutionForms to delete
     */
    where?: InstitutionFormWhereInput
    /**
     * Limit how many InstitutionForms to delete.
     */
    limit?: number
  }

  /**
   * InstitutionForm without action
   */
  export type InstitutionFormDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitutionForm
     */
    select?: InstitutionFormSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstitutionForm
     */
    omit?: InstitutionFormOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstitutionFormInclude<ExtArgs> | null
  }


  /**
   * Model AppliedInstitution
   */

  export type AggregateAppliedInstitution = {
    _count: AppliedInstitutionCountAggregateOutputType | null
    _min: AppliedInstitutionMinAggregateOutputType | null
    _max: AppliedInstitutionMaxAggregateOutputType | null
  }

  export type AppliedInstitutionMinAggregateOutputType = {
    id: string | null
    studentId: string | null
    institutionId: string | null
  }

  export type AppliedInstitutionMaxAggregateOutputType = {
    id: string | null
    studentId: string | null
    institutionId: string | null
  }

  export type AppliedInstitutionCountAggregateOutputType = {
    id: number
    studentId: number
    institutionId: number
    _all: number
  }


  export type AppliedInstitutionMinAggregateInputType = {
    id?: true
    studentId?: true
    institutionId?: true
  }

  export type AppliedInstitutionMaxAggregateInputType = {
    id?: true
    studentId?: true
    institutionId?: true
  }

  export type AppliedInstitutionCountAggregateInputType = {
    id?: true
    studentId?: true
    institutionId?: true
    _all?: true
  }

  export type AppliedInstitutionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AppliedInstitution to aggregate.
     */
    where?: AppliedInstitutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppliedInstitutions to fetch.
     */
    orderBy?: AppliedInstitutionOrderByWithRelationInput | AppliedInstitutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppliedInstitutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppliedInstitutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppliedInstitutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AppliedInstitutions
    **/
    _count?: true | AppliedInstitutionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppliedInstitutionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppliedInstitutionMaxAggregateInputType
  }

  export type GetAppliedInstitutionAggregateType<T extends AppliedInstitutionAggregateArgs> = {
        [P in keyof T & keyof AggregateAppliedInstitution]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppliedInstitution[P]>
      : GetScalarType<T[P], AggregateAppliedInstitution[P]>
  }




  export type AppliedInstitutionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppliedInstitutionWhereInput
    orderBy?: AppliedInstitutionOrderByWithAggregationInput | AppliedInstitutionOrderByWithAggregationInput[]
    by: AppliedInstitutionScalarFieldEnum[] | AppliedInstitutionScalarFieldEnum
    having?: AppliedInstitutionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppliedInstitutionCountAggregateInputType | true
    _min?: AppliedInstitutionMinAggregateInputType
    _max?: AppliedInstitutionMaxAggregateInputType
  }

  export type AppliedInstitutionGroupByOutputType = {
    id: string
    studentId: string
    institutionId: string
    _count: AppliedInstitutionCountAggregateOutputType | null
    _min: AppliedInstitutionMinAggregateOutputType | null
    _max: AppliedInstitutionMaxAggregateOutputType | null
  }

  type GetAppliedInstitutionGroupByPayload<T extends AppliedInstitutionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppliedInstitutionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppliedInstitutionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppliedInstitutionGroupByOutputType[P]>
            : GetScalarType<T[P], AppliedInstitutionGroupByOutputType[P]>
        }
      >
    >


  export type AppliedInstitutionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    institutionId?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appliedInstitution"]>

  export type AppliedInstitutionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    institutionId?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appliedInstitution"]>

  export type AppliedInstitutionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    institutionId?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appliedInstitution"]>

  export type AppliedInstitutionSelectScalar = {
    id?: boolean
    studentId?: boolean
    institutionId?: boolean
  }

  export type AppliedInstitutionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "studentId" | "institutionId", ExtArgs["result"]["appliedInstitution"]>
  export type AppliedInstitutionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }
  export type AppliedInstitutionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }
  export type AppliedInstitutionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }

  export type $AppliedInstitutionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AppliedInstitution"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs>
      institution: Prisma.$InstitutionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      studentId: string
      institutionId: string
    }, ExtArgs["result"]["appliedInstitution"]>
    composites: {}
  }

  type AppliedInstitutionGetPayload<S extends boolean | null | undefined | AppliedInstitutionDefaultArgs> = $Result.GetResult<Prisma.$AppliedInstitutionPayload, S>

  type AppliedInstitutionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AppliedInstitutionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AppliedInstitutionCountAggregateInputType | true
    }

  export interface AppliedInstitutionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AppliedInstitution'], meta: { name: 'AppliedInstitution' } }
    /**
     * Find zero or one AppliedInstitution that matches the filter.
     * @param {AppliedInstitutionFindUniqueArgs} args - Arguments to find a AppliedInstitution
     * @example
     * // Get one AppliedInstitution
     * const appliedInstitution = await prisma.appliedInstitution.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AppliedInstitutionFindUniqueArgs>(args: SelectSubset<T, AppliedInstitutionFindUniqueArgs<ExtArgs>>): Prisma__AppliedInstitutionClient<$Result.GetResult<Prisma.$AppliedInstitutionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AppliedInstitution that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AppliedInstitutionFindUniqueOrThrowArgs} args - Arguments to find a AppliedInstitution
     * @example
     * // Get one AppliedInstitution
     * const appliedInstitution = await prisma.appliedInstitution.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AppliedInstitutionFindUniqueOrThrowArgs>(args: SelectSubset<T, AppliedInstitutionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AppliedInstitutionClient<$Result.GetResult<Prisma.$AppliedInstitutionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AppliedInstitution that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppliedInstitutionFindFirstArgs} args - Arguments to find a AppliedInstitution
     * @example
     * // Get one AppliedInstitution
     * const appliedInstitution = await prisma.appliedInstitution.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AppliedInstitutionFindFirstArgs>(args?: SelectSubset<T, AppliedInstitutionFindFirstArgs<ExtArgs>>): Prisma__AppliedInstitutionClient<$Result.GetResult<Prisma.$AppliedInstitutionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AppliedInstitution that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppliedInstitutionFindFirstOrThrowArgs} args - Arguments to find a AppliedInstitution
     * @example
     * // Get one AppliedInstitution
     * const appliedInstitution = await prisma.appliedInstitution.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AppliedInstitutionFindFirstOrThrowArgs>(args?: SelectSubset<T, AppliedInstitutionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AppliedInstitutionClient<$Result.GetResult<Prisma.$AppliedInstitutionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AppliedInstitutions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppliedInstitutionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AppliedInstitutions
     * const appliedInstitutions = await prisma.appliedInstitution.findMany()
     * 
     * // Get first 10 AppliedInstitutions
     * const appliedInstitutions = await prisma.appliedInstitution.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appliedInstitutionWithIdOnly = await prisma.appliedInstitution.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AppliedInstitutionFindManyArgs>(args?: SelectSubset<T, AppliedInstitutionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppliedInstitutionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AppliedInstitution.
     * @param {AppliedInstitutionCreateArgs} args - Arguments to create a AppliedInstitution.
     * @example
     * // Create one AppliedInstitution
     * const AppliedInstitution = await prisma.appliedInstitution.create({
     *   data: {
     *     // ... data to create a AppliedInstitution
     *   }
     * })
     * 
     */
    create<T extends AppliedInstitutionCreateArgs>(args: SelectSubset<T, AppliedInstitutionCreateArgs<ExtArgs>>): Prisma__AppliedInstitutionClient<$Result.GetResult<Prisma.$AppliedInstitutionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AppliedInstitutions.
     * @param {AppliedInstitutionCreateManyArgs} args - Arguments to create many AppliedInstitutions.
     * @example
     * // Create many AppliedInstitutions
     * const appliedInstitution = await prisma.appliedInstitution.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AppliedInstitutionCreateManyArgs>(args?: SelectSubset<T, AppliedInstitutionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AppliedInstitutions and returns the data saved in the database.
     * @param {AppliedInstitutionCreateManyAndReturnArgs} args - Arguments to create many AppliedInstitutions.
     * @example
     * // Create many AppliedInstitutions
     * const appliedInstitution = await prisma.appliedInstitution.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AppliedInstitutions and only return the `id`
     * const appliedInstitutionWithIdOnly = await prisma.appliedInstitution.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AppliedInstitutionCreateManyAndReturnArgs>(args?: SelectSubset<T, AppliedInstitutionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppliedInstitutionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AppliedInstitution.
     * @param {AppliedInstitutionDeleteArgs} args - Arguments to delete one AppliedInstitution.
     * @example
     * // Delete one AppliedInstitution
     * const AppliedInstitution = await prisma.appliedInstitution.delete({
     *   where: {
     *     // ... filter to delete one AppliedInstitution
     *   }
     * })
     * 
     */
    delete<T extends AppliedInstitutionDeleteArgs>(args: SelectSubset<T, AppliedInstitutionDeleteArgs<ExtArgs>>): Prisma__AppliedInstitutionClient<$Result.GetResult<Prisma.$AppliedInstitutionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AppliedInstitution.
     * @param {AppliedInstitutionUpdateArgs} args - Arguments to update one AppliedInstitution.
     * @example
     * // Update one AppliedInstitution
     * const appliedInstitution = await prisma.appliedInstitution.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AppliedInstitutionUpdateArgs>(args: SelectSubset<T, AppliedInstitutionUpdateArgs<ExtArgs>>): Prisma__AppliedInstitutionClient<$Result.GetResult<Prisma.$AppliedInstitutionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AppliedInstitutions.
     * @param {AppliedInstitutionDeleteManyArgs} args - Arguments to filter AppliedInstitutions to delete.
     * @example
     * // Delete a few AppliedInstitutions
     * const { count } = await prisma.appliedInstitution.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AppliedInstitutionDeleteManyArgs>(args?: SelectSubset<T, AppliedInstitutionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AppliedInstitutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppliedInstitutionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AppliedInstitutions
     * const appliedInstitution = await prisma.appliedInstitution.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AppliedInstitutionUpdateManyArgs>(args: SelectSubset<T, AppliedInstitutionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AppliedInstitutions and returns the data updated in the database.
     * @param {AppliedInstitutionUpdateManyAndReturnArgs} args - Arguments to update many AppliedInstitutions.
     * @example
     * // Update many AppliedInstitutions
     * const appliedInstitution = await prisma.appliedInstitution.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AppliedInstitutions and only return the `id`
     * const appliedInstitutionWithIdOnly = await prisma.appliedInstitution.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AppliedInstitutionUpdateManyAndReturnArgs>(args: SelectSubset<T, AppliedInstitutionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppliedInstitutionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AppliedInstitution.
     * @param {AppliedInstitutionUpsertArgs} args - Arguments to update or create a AppliedInstitution.
     * @example
     * // Update or create a AppliedInstitution
     * const appliedInstitution = await prisma.appliedInstitution.upsert({
     *   create: {
     *     // ... data to create a AppliedInstitution
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AppliedInstitution we want to update
     *   }
     * })
     */
    upsert<T extends AppliedInstitutionUpsertArgs>(args: SelectSubset<T, AppliedInstitutionUpsertArgs<ExtArgs>>): Prisma__AppliedInstitutionClient<$Result.GetResult<Prisma.$AppliedInstitutionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AppliedInstitutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppliedInstitutionCountArgs} args - Arguments to filter AppliedInstitutions to count.
     * @example
     * // Count the number of AppliedInstitutions
     * const count = await prisma.appliedInstitution.count({
     *   where: {
     *     // ... the filter for the AppliedInstitutions we want to count
     *   }
     * })
    **/
    count<T extends AppliedInstitutionCountArgs>(
      args?: Subset<T, AppliedInstitutionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppliedInstitutionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AppliedInstitution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppliedInstitutionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppliedInstitutionAggregateArgs>(args: Subset<T, AppliedInstitutionAggregateArgs>): Prisma.PrismaPromise<GetAppliedInstitutionAggregateType<T>>

    /**
     * Group by AppliedInstitution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppliedInstitutionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppliedInstitutionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppliedInstitutionGroupByArgs['orderBy'] }
        : { orderBy?: AppliedInstitutionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppliedInstitutionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppliedInstitutionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AppliedInstitution model
   */
  readonly fields: AppliedInstitutionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AppliedInstitution.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AppliedInstitutionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    institution<T extends InstitutionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstitutionDefaultArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AppliedInstitution model
   */
  interface AppliedInstitutionFieldRefs {
    readonly id: FieldRef<"AppliedInstitution", 'String'>
    readonly studentId: FieldRef<"AppliedInstitution", 'String'>
    readonly institutionId: FieldRef<"AppliedInstitution", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AppliedInstitution findUnique
   */
  export type AppliedInstitutionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppliedInstitution
     */
    select?: AppliedInstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppliedInstitution
     */
    omit?: AppliedInstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppliedInstitutionInclude<ExtArgs> | null
    /**
     * Filter, which AppliedInstitution to fetch.
     */
    where: AppliedInstitutionWhereUniqueInput
  }

  /**
   * AppliedInstitution findUniqueOrThrow
   */
  export type AppliedInstitutionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppliedInstitution
     */
    select?: AppliedInstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppliedInstitution
     */
    omit?: AppliedInstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppliedInstitutionInclude<ExtArgs> | null
    /**
     * Filter, which AppliedInstitution to fetch.
     */
    where: AppliedInstitutionWhereUniqueInput
  }

  /**
   * AppliedInstitution findFirst
   */
  export type AppliedInstitutionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppliedInstitution
     */
    select?: AppliedInstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppliedInstitution
     */
    omit?: AppliedInstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppliedInstitutionInclude<ExtArgs> | null
    /**
     * Filter, which AppliedInstitution to fetch.
     */
    where?: AppliedInstitutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppliedInstitutions to fetch.
     */
    orderBy?: AppliedInstitutionOrderByWithRelationInput | AppliedInstitutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AppliedInstitutions.
     */
    cursor?: AppliedInstitutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppliedInstitutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppliedInstitutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AppliedInstitutions.
     */
    distinct?: AppliedInstitutionScalarFieldEnum | AppliedInstitutionScalarFieldEnum[]
  }

  /**
   * AppliedInstitution findFirstOrThrow
   */
  export type AppliedInstitutionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppliedInstitution
     */
    select?: AppliedInstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppliedInstitution
     */
    omit?: AppliedInstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppliedInstitutionInclude<ExtArgs> | null
    /**
     * Filter, which AppliedInstitution to fetch.
     */
    where?: AppliedInstitutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppliedInstitutions to fetch.
     */
    orderBy?: AppliedInstitutionOrderByWithRelationInput | AppliedInstitutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AppliedInstitutions.
     */
    cursor?: AppliedInstitutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppliedInstitutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppliedInstitutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AppliedInstitutions.
     */
    distinct?: AppliedInstitutionScalarFieldEnum | AppliedInstitutionScalarFieldEnum[]
  }

  /**
   * AppliedInstitution findMany
   */
  export type AppliedInstitutionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppliedInstitution
     */
    select?: AppliedInstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppliedInstitution
     */
    omit?: AppliedInstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppliedInstitutionInclude<ExtArgs> | null
    /**
     * Filter, which AppliedInstitutions to fetch.
     */
    where?: AppliedInstitutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppliedInstitutions to fetch.
     */
    orderBy?: AppliedInstitutionOrderByWithRelationInput | AppliedInstitutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AppliedInstitutions.
     */
    cursor?: AppliedInstitutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppliedInstitutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppliedInstitutions.
     */
    skip?: number
    distinct?: AppliedInstitutionScalarFieldEnum | AppliedInstitutionScalarFieldEnum[]
  }

  /**
   * AppliedInstitution create
   */
  export type AppliedInstitutionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppliedInstitution
     */
    select?: AppliedInstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppliedInstitution
     */
    omit?: AppliedInstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppliedInstitutionInclude<ExtArgs> | null
    /**
     * The data needed to create a AppliedInstitution.
     */
    data: XOR<AppliedInstitutionCreateInput, AppliedInstitutionUncheckedCreateInput>
  }

  /**
   * AppliedInstitution createMany
   */
  export type AppliedInstitutionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AppliedInstitutions.
     */
    data: AppliedInstitutionCreateManyInput | AppliedInstitutionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AppliedInstitution createManyAndReturn
   */
  export type AppliedInstitutionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppliedInstitution
     */
    select?: AppliedInstitutionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AppliedInstitution
     */
    omit?: AppliedInstitutionOmit<ExtArgs> | null
    /**
     * The data used to create many AppliedInstitutions.
     */
    data: AppliedInstitutionCreateManyInput | AppliedInstitutionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppliedInstitutionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AppliedInstitution update
   */
  export type AppliedInstitutionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppliedInstitution
     */
    select?: AppliedInstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppliedInstitution
     */
    omit?: AppliedInstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppliedInstitutionInclude<ExtArgs> | null
    /**
     * The data needed to update a AppliedInstitution.
     */
    data: XOR<AppliedInstitutionUpdateInput, AppliedInstitutionUncheckedUpdateInput>
    /**
     * Choose, which AppliedInstitution to update.
     */
    where: AppliedInstitutionWhereUniqueInput
  }

  /**
   * AppliedInstitution updateMany
   */
  export type AppliedInstitutionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AppliedInstitutions.
     */
    data: XOR<AppliedInstitutionUpdateManyMutationInput, AppliedInstitutionUncheckedUpdateManyInput>
    /**
     * Filter which AppliedInstitutions to update
     */
    where?: AppliedInstitutionWhereInput
    /**
     * Limit how many AppliedInstitutions to update.
     */
    limit?: number
  }

  /**
   * AppliedInstitution updateManyAndReturn
   */
  export type AppliedInstitutionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppliedInstitution
     */
    select?: AppliedInstitutionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AppliedInstitution
     */
    omit?: AppliedInstitutionOmit<ExtArgs> | null
    /**
     * The data used to update AppliedInstitutions.
     */
    data: XOR<AppliedInstitutionUpdateManyMutationInput, AppliedInstitutionUncheckedUpdateManyInput>
    /**
     * Filter which AppliedInstitutions to update
     */
    where?: AppliedInstitutionWhereInput
    /**
     * Limit how many AppliedInstitutions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppliedInstitutionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AppliedInstitution upsert
   */
  export type AppliedInstitutionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppliedInstitution
     */
    select?: AppliedInstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppliedInstitution
     */
    omit?: AppliedInstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppliedInstitutionInclude<ExtArgs> | null
    /**
     * The filter to search for the AppliedInstitution to update in case it exists.
     */
    where: AppliedInstitutionWhereUniqueInput
    /**
     * In case the AppliedInstitution found by the `where` argument doesn't exist, create a new AppliedInstitution with this data.
     */
    create: XOR<AppliedInstitutionCreateInput, AppliedInstitutionUncheckedCreateInput>
    /**
     * In case the AppliedInstitution was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppliedInstitutionUpdateInput, AppliedInstitutionUncheckedUpdateInput>
  }

  /**
   * AppliedInstitution delete
   */
  export type AppliedInstitutionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppliedInstitution
     */
    select?: AppliedInstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppliedInstitution
     */
    omit?: AppliedInstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppliedInstitutionInclude<ExtArgs> | null
    /**
     * Filter which AppliedInstitution to delete.
     */
    where: AppliedInstitutionWhereUniqueInput
  }

  /**
   * AppliedInstitution deleteMany
   */
  export type AppliedInstitutionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AppliedInstitutions to delete
     */
    where?: AppliedInstitutionWhereInput
    /**
     * Limit how many AppliedInstitutions to delete.
     */
    limit?: number
  }

  /**
   * AppliedInstitution without action
   */
  export type AppliedInstitutionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppliedInstitution
     */
    select?: AppliedInstitutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppliedInstitution
     */
    omit?: AppliedInstitutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppliedInstitutionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const StudentScalarFieldEnum: {
    studentId: 'studentId',
    fullName: 'fullName',
    email: 'email',
    phone: 'phone',
    password: 'password',
    address: 'address',
    role: 'role',
    dob: 'dob',
    profile: 'profile',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const FormScalarFieldEnum: {
    formId: 'formId',
    studentId: 'studentId',
    board: 'board',
    reg: 'reg',
    hscRoll: 'hscRoll',
    sscRoll: 'sscRoll',
    hscGPA: 'hscGPA',
    sscGPA: 'sscGPA'
  };

  export type FormScalarFieldEnum = (typeof FormScalarFieldEnum)[keyof typeof FormScalarFieldEnum]


  export const AdminScalarFieldEnum: {
    adminId: 'adminId',
    email: 'email',
    password: 'password',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const InstitutionScalarFieldEnum: {
    institutionId: 'institutionId',
    name: 'name',
    requirementsHscGPA: 'requirementsHscGPA',
    requirementsSscGPA: 'requirementsSscGPA',
    institutionCategoryInstitutionCategoryId: 'institutionCategoryInstitutionCategoryId'
  };

  export type InstitutionScalarFieldEnum = (typeof InstitutionScalarFieldEnum)[keyof typeof InstitutionScalarFieldEnum]


  export const InstitutionCategoryScalarFieldEnum: {
    institutionCategoryId: 'institutionCategoryId',
    name: 'name',
    description: 'description'
  };

  export type InstitutionCategoryScalarFieldEnum = (typeof InstitutionCategoryScalarFieldEnum)[keyof typeof InstitutionCategoryScalarFieldEnum]


  export const InstitutionFormScalarFieldEnum: {
    institutionFormId: 'institutionFormId',
    institutionId: 'institutionId',
    fieldName: 'fieldName',
    fieldType: 'fieldType',
    isRequired: 'isRequired'
  };

  export type InstitutionFormScalarFieldEnum = (typeof InstitutionFormScalarFieldEnum)[keyof typeof InstitutionFormScalarFieldEnum]


  export const AppliedInstitutionScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    institutionId: 'institutionId'
  };

  export type AppliedInstitutionScalarFieldEnum = (typeof AppliedInstitutionScalarFieldEnum)[keyof typeof AppliedInstitutionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type StudentWhereInput = {
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    studentId?: StringFilter<"Student"> | string
    fullName?: StringFilter<"Student"> | string
    email?: StringFilter<"Student"> | string
    phone?: StringNullableFilter<"Student"> | string | null
    password?: StringFilter<"Student"> | string
    address?: StringNullableFilter<"Student"> | string | null
    role?: StringFilter<"Student"> | string
    dob?: DateTimeFilter<"Student"> | Date | string
    profile?: StringNullableFilter<"Student"> | string | null
    createdAt?: DateTimeFilter<"Student"> | Date | string
    updatedAt?: DateTimeFilter<"Student"> | Date | string
    forms?: FormListRelationFilter
    AppliedInstitution?: AppliedInstitutionListRelationFilter
  }

  export type StudentOrderByWithRelationInput = {
    studentId?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    password?: SortOrder
    address?: SortOrderInput | SortOrder
    role?: SortOrder
    dob?: SortOrder
    profile?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    forms?: FormOrderByRelationAggregateInput
    AppliedInstitution?: AppliedInstitutionOrderByRelationAggregateInput
  }

  export type StudentWhereUniqueInput = Prisma.AtLeast<{
    studentId?: string
    email?: string
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    fullName?: StringFilter<"Student"> | string
    phone?: StringNullableFilter<"Student"> | string | null
    password?: StringFilter<"Student"> | string
    address?: StringNullableFilter<"Student"> | string | null
    role?: StringFilter<"Student"> | string
    dob?: DateTimeFilter<"Student"> | Date | string
    profile?: StringNullableFilter<"Student"> | string | null
    createdAt?: DateTimeFilter<"Student"> | Date | string
    updatedAt?: DateTimeFilter<"Student"> | Date | string
    forms?: FormListRelationFilter
    AppliedInstitution?: AppliedInstitutionListRelationFilter
  }, "studentId" | "email">

  export type StudentOrderByWithAggregationInput = {
    studentId?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    password?: SortOrder
    address?: SortOrderInput | SortOrder
    role?: SortOrder
    dob?: SortOrder
    profile?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StudentCountOrderByAggregateInput
    _max?: StudentMaxOrderByAggregateInput
    _min?: StudentMinOrderByAggregateInput
  }

  export type StudentScalarWhereWithAggregatesInput = {
    AND?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    OR?: StudentScalarWhereWithAggregatesInput[]
    NOT?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    studentId?: StringWithAggregatesFilter<"Student"> | string
    fullName?: StringWithAggregatesFilter<"Student"> | string
    email?: StringWithAggregatesFilter<"Student"> | string
    phone?: StringNullableWithAggregatesFilter<"Student"> | string | null
    password?: StringWithAggregatesFilter<"Student"> | string
    address?: StringNullableWithAggregatesFilter<"Student"> | string | null
    role?: StringWithAggregatesFilter<"Student"> | string
    dob?: DateTimeWithAggregatesFilter<"Student"> | Date | string
    profile?: StringNullableWithAggregatesFilter<"Student"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Student"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Student"> | Date | string
  }

  export type FormWhereInput = {
    AND?: FormWhereInput | FormWhereInput[]
    OR?: FormWhereInput[]
    NOT?: FormWhereInput | FormWhereInput[]
    formId?: StringFilter<"Form"> | string
    studentId?: StringFilter<"Form"> | string
    board?: StringFilter<"Form"> | string
    reg?: IntFilter<"Form"> | number
    hscRoll?: IntFilter<"Form"> | number
    sscRoll?: IntFilter<"Form"> | number
    hscGPA?: FloatFilter<"Form"> | number
    sscGPA?: FloatFilter<"Form"> | number
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }

  export type FormOrderByWithRelationInput = {
    formId?: SortOrder
    studentId?: SortOrder
    board?: SortOrder
    reg?: SortOrder
    hscRoll?: SortOrder
    sscRoll?: SortOrder
    hscGPA?: SortOrder
    sscGPA?: SortOrder
    student?: StudentOrderByWithRelationInput
  }

  export type FormWhereUniqueInput = Prisma.AtLeast<{
    formId?: string
    studentId?: string
    reg?: number
    hscRoll?: number
    sscRoll?: number
    AND?: FormWhereInput | FormWhereInput[]
    OR?: FormWhereInput[]
    NOT?: FormWhereInput | FormWhereInput[]
    board?: StringFilter<"Form"> | string
    hscGPA?: FloatFilter<"Form"> | number
    sscGPA?: FloatFilter<"Form"> | number
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }, "formId" | "studentId" | "reg" | "hscRoll" | "sscRoll">

  export type FormOrderByWithAggregationInput = {
    formId?: SortOrder
    studentId?: SortOrder
    board?: SortOrder
    reg?: SortOrder
    hscRoll?: SortOrder
    sscRoll?: SortOrder
    hscGPA?: SortOrder
    sscGPA?: SortOrder
    _count?: FormCountOrderByAggregateInput
    _avg?: FormAvgOrderByAggregateInput
    _max?: FormMaxOrderByAggregateInput
    _min?: FormMinOrderByAggregateInput
    _sum?: FormSumOrderByAggregateInput
  }

  export type FormScalarWhereWithAggregatesInput = {
    AND?: FormScalarWhereWithAggregatesInput | FormScalarWhereWithAggregatesInput[]
    OR?: FormScalarWhereWithAggregatesInput[]
    NOT?: FormScalarWhereWithAggregatesInput | FormScalarWhereWithAggregatesInput[]
    formId?: StringWithAggregatesFilter<"Form"> | string
    studentId?: StringWithAggregatesFilter<"Form"> | string
    board?: StringWithAggregatesFilter<"Form"> | string
    reg?: IntWithAggregatesFilter<"Form"> | number
    hscRoll?: IntWithAggregatesFilter<"Form"> | number
    sscRoll?: IntWithAggregatesFilter<"Form"> | number
    hscGPA?: FloatWithAggregatesFilter<"Form"> | number
    sscGPA?: FloatWithAggregatesFilter<"Form"> | number
  }

  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    adminId?: StringFilter<"Admin"> | string
    email?: StringFilter<"Admin"> | string
    password?: StringFilter<"Admin"> | string
    role?: StringFilter<"Admin"> | string
    createdAt?: DateTimeFilter<"Admin"> | Date | string
    updatedAt?: DateTimeFilter<"Admin"> | Date | string
  }

  export type AdminOrderByWithRelationInput = {
    adminId?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    adminId?: string
    email?: string
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    password?: StringFilter<"Admin"> | string
    role?: StringFilter<"Admin"> | string
    createdAt?: DateTimeFilter<"Admin"> | Date | string
    updatedAt?: DateTimeFilter<"Admin"> | Date | string
  }, "adminId" | "email">

  export type AdminOrderByWithAggregationInput = {
    adminId?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    adminId?: StringWithAggregatesFilter<"Admin"> | string
    email?: StringWithAggregatesFilter<"Admin"> | string
    password?: StringWithAggregatesFilter<"Admin"> | string
    role?: StringWithAggregatesFilter<"Admin"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Admin"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Admin"> | Date | string
  }

  export type InstitutionWhereInput = {
    AND?: InstitutionWhereInput | InstitutionWhereInput[]
    OR?: InstitutionWhereInput[]
    NOT?: InstitutionWhereInput | InstitutionWhereInput[]
    institutionId?: StringFilter<"Institution"> | string
    name?: StringFilter<"Institution"> | string
    requirementsHscGPA?: FloatFilter<"Institution"> | number
    requirementsSscGPA?: FloatFilter<"Institution"> | number
    institutionCategoryInstitutionCategoryId?: StringNullableFilter<"Institution"> | string | null
    institutionForms?: InstitutionFormListRelationFilter
    AppliedInstitution?: AppliedInstitutionListRelationFilter
    InstitutionCategory?: XOR<InstitutionCategoryNullableScalarRelationFilter, InstitutionCategoryWhereInput> | null
  }

  export type InstitutionOrderByWithRelationInput = {
    institutionId?: SortOrder
    name?: SortOrder
    requirementsHscGPA?: SortOrder
    requirementsSscGPA?: SortOrder
    institutionCategoryInstitutionCategoryId?: SortOrderInput | SortOrder
    institutionForms?: InstitutionFormOrderByRelationAggregateInput
    AppliedInstitution?: AppliedInstitutionOrderByRelationAggregateInput
    InstitutionCategory?: InstitutionCategoryOrderByWithRelationInput
  }

  export type InstitutionWhereUniqueInput = Prisma.AtLeast<{
    institutionId?: string
    AND?: InstitutionWhereInput | InstitutionWhereInput[]
    OR?: InstitutionWhereInput[]
    NOT?: InstitutionWhereInput | InstitutionWhereInput[]
    name?: StringFilter<"Institution"> | string
    requirementsHscGPA?: FloatFilter<"Institution"> | number
    requirementsSscGPA?: FloatFilter<"Institution"> | number
    institutionCategoryInstitutionCategoryId?: StringNullableFilter<"Institution"> | string | null
    institutionForms?: InstitutionFormListRelationFilter
    AppliedInstitution?: AppliedInstitutionListRelationFilter
    InstitutionCategory?: XOR<InstitutionCategoryNullableScalarRelationFilter, InstitutionCategoryWhereInput> | null
  }, "institutionId">

  export type InstitutionOrderByWithAggregationInput = {
    institutionId?: SortOrder
    name?: SortOrder
    requirementsHscGPA?: SortOrder
    requirementsSscGPA?: SortOrder
    institutionCategoryInstitutionCategoryId?: SortOrderInput | SortOrder
    _count?: InstitutionCountOrderByAggregateInput
    _avg?: InstitutionAvgOrderByAggregateInput
    _max?: InstitutionMaxOrderByAggregateInput
    _min?: InstitutionMinOrderByAggregateInput
    _sum?: InstitutionSumOrderByAggregateInput
  }

  export type InstitutionScalarWhereWithAggregatesInput = {
    AND?: InstitutionScalarWhereWithAggregatesInput | InstitutionScalarWhereWithAggregatesInput[]
    OR?: InstitutionScalarWhereWithAggregatesInput[]
    NOT?: InstitutionScalarWhereWithAggregatesInput | InstitutionScalarWhereWithAggregatesInput[]
    institutionId?: StringWithAggregatesFilter<"Institution"> | string
    name?: StringWithAggregatesFilter<"Institution"> | string
    requirementsHscGPA?: FloatWithAggregatesFilter<"Institution"> | number
    requirementsSscGPA?: FloatWithAggregatesFilter<"Institution"> | number
    institutionCategoryInstitutionCategoryId?: StringNullableWithAggregatesFilter<"Institution"> | string | null
  }

  export type InstitutionCategoryWhereInput = {
    AND?: InstitutionCategoryWhereInput | InstitutionCategoryWhereInput[]
    OR?: InstitutionCategoryWhereInput[]
    NOT?: InstitutionCategoryWhereInput | InstitutionCategoryWhereInput[]
    institutionCategoryId?: StringFilter<"InstitutionCategory"> | string
    name?: StringFilter<"InstitutionCategory"> | string
    description?: StringFilter<"InstitutionCategory"> | string
    institutions?: InstitutionListRelationFilter
  }

  export type InstitutionCategoryOrderByWithRelationInput = {
    institutionCategoryId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    institutions?: InstitutionOrderByRelationAggregateInput
  }

  export type InstitutionCategoryWhereUniqueInput = Prisma.AtLeast<{
    institutionCategoryId?: string
    AND?: InstitutionCategoryWhereInput | InstitutionCategoryWhereInput[]
    OR?: InstitutionCategoryWhereInput[]
    NOT?: InstitutionCategoryWhereInput | InstitutionCategoryWhereInput[]
    name?: StringFilter<"InstitutionCategory"> | string
    description?: StringFilter<"InstitutionCategory"> | string
    institutions?: InstitutionListRelationFilter
  }, "institutionCategoryId">

  export type InstitutionCategoryOrderByWithAggregationInput = {
    institutionCategoryId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    _count?: InstitutionCategoryCountOrderByAggregateInput
    _max?: InstitutionCategoryMaxOrderByAggregateInput
    _min?: InstitutionCategoryMinOrderByAggregateInput
  }

  export type InstitutionCategoryScalarWhereWithAggregatesInput = {
    AND?: InstitutionCategoryScalarWhereWithAggregatesInput | InstitutionCategoryScalarWhereWithAggregatesInput[]
    OR?: InstitutionCategoryScalarWhereWithAggregatesInput[]
    NOT?: InstitutionCategoryScalarWhereWithAggregatesInput | InstitutionCategoryScalarWhereWithAggregatesInput[]
    institutionCategoryId?: StringWithAggregatesFilter<"InstitutionCategory"> | string
    name?: StringWithAggregatesFilter<"InstitutionCategory"> | string
    description?: StringWithAggregatesFilter<"InstitutionCategory"> | string
  }

  export type InstitutionFormWhereInput = {
    AND?: InstitutionFormWhereInput | InstitutionFormWhereInput[]
    OR?: InstitutionFormWhereInput[]
    NOT?: InstitutionFormWhereInput | InstitutionFormWhereInput[]
    institutionFormId?: StringFilter<"InstitutionForm"> | string
    institutionId?: StringFilter<"InstitutionForm"> | string
    fieldName?: StringFilter<"InstitutionForm"> | string
    fieldType?: StringFilter<"InstitutionForm"> | string
    isRequired?: BoolFilter<"InstitutionForm"> | boolean
    institution?: XOR<InstitutionScalarRelationFilter, InstitutionWhereInput>
  }

  export type InstitutionFormOrderByWithRelationInput = {
    institutionFormId?: SortOrder
    institutionId?: SortOrder
    fieldName?: SortOrder
    fieldType?: SortOrder
    isRequired?: SortOrder
    institution?: InstitutionOrderByWithRelationInput
  }

  export type InstitutionFormWhereUniqueInput = Prisma.AtLeast<{
    institutionFormId?: string
    AND?: InstitutionFormWhereInput | InstitutionFormWhereInput[]
    OR?: InstitutionFormWhereInput[]
    NOT?: InstitutionFormWhereInput | InstitutionFormWhereInput[]
    institutionId?: StringFilter<"InstitutionForm"> | string
    fieldName?: StringFilter<"InstitutionForm"> | string
    fieldType?: StringFilter<"InstitutionForm"> | string
    isRequired?: BoolFilter<"InstitutionForm"> | boolean
    institution?: XOR<InstitutionScalarRelationFilter, InstitutionWhereInput>
  }, "institutionFormId">

  export type InstitutionFormOrderByWithAggregationInput = {
    institutionFormId?: SortOrder
    institutionId?: SortOrder
    fieldName?: SortOrder
    fieldType?: SortOrder
    isRequired?: SortOrder
    _count?: InstitutionFormCountOrderByAggregateInput
    _max?: InstitutionFormMaxOrderByAggregateInput
    _min?: InstitutionFormMinOrderByAggregateInput
  }

  export type InstitutionFormScalarWhereWithAggregatesInput = {
    AND?: InstitutionFormScalarWhereWithAggregatesInput | InstitutionFormScalarWhereWithAggregatesInput[]
    OR?: InstitutionFormScalarWhereWithAggregatesInput[]
    NOT?: InstitutionFormScalarWhereWithAggregatesInput | InstitutionFormScalarWhereWithAggregatesInput[]
    institutionFormId?: StringWithAggregatesFilter<"InstitutionForm"> | string
    institutionId?: StringWithAggregatesFilter<"InstitutionForm"> | string
    fieldName?: StringWithAggregatesFilter<"InstitutionForm"> | string
    fieldType?: StringWithAggregatesFilter<"InstitutionForm"> | string
    isRequired?: BoolWithAggregatesFilter<"InstitutionForm"> | boolean
  }

  export type AppliedInstitutionWhereInput = {
    AND?: AppliedInstitutionWhereInput | AppliedInstitutionWhereInput[]
    OR?: AppliedInstitutionWhereInput[]
    NOT?: AppliedInstitutionWhereInput | AppliedInstitutionWhereInput[]
    id?: StringFilter<"AppliedInstitution"> | string
    studentId?: StringFilter<"AppliedInstitution"> | string
    institutionId?: StringFilter<"AppliedInstitution"> | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    institution?: XOR<InstitutionScalarRelationFilter, InstitutionWhereInput>
  }

  export type AppliedInstitutionOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    institutionId?: SortOrder
    student?: StudentOrderByWithRelationInput
    institution?: InstitutionOrderByWithRelationInput
  }

  export type AppliedInstitutionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AppliedInstitutionWhereInput | AppliedInstitutionWhereInput[]
    OR?: AppliedInstitutionWhereInput[]
    NOT?: AppliedInstitutionWhereInput | AppliedInstitutionWhereInput[]
    studentId?: StringFilter<"AppliedInstitution"> | string
    institutionId?: StringFilter<"AppliedInstitution"> | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    institution?: XOR<InstitutionScalarRelationFilter, InstitutionWhereInput>
  }, "id">

  export type AppliedInstitutionOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    institutionId?: SortOrder
    _count?: AppliedInstitutionCountOrderByAggregateInput
    _max?: AppliedInstitutionMaxOrderByAggregateInput
    _min?: AppliedInstitutionMinOrderByAggregateInput
  }

  export type AppliedInstitutionScalarWhereWithAggregatesInput = {
    AND?: AppliedInstitutionScalarWhereWithAggregatesInput | AppliedInstitutionScalarWhereWithAggregatesInput[]
    OR?: AppliedInstitutionScalarWhereWithAggregatesInput[]
    NOT?: AppliedInstitutionScalarWhereWithAggregatesInput | AppliedInstitutionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AppliedInstitution"> | string
    studentId?: StringWithAggregatesFilter<"AppliedInstitution"> | string
    institutionId?: StringWithAggregatesFilter<"AppliedInstitution"> | string
  }

  export type StudentCreateInput = {
    studentId?: string
    fullName: string
    email: string
    phone?: string | null
    password: string
    address?: string | null
    role?: string
    dob: Date | string
    profile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    forms?: FormCreateNestedManyWithoutStudentInput
    AppliedInstitution?: AppliedInstitutionCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateInput = {
    studentId?: string
    fullName: string
    email: string
    phone?: string | null
    password: string
    address?: string | null
    role?: string
    dob: Date | string
    profile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    forms?: FormUncheckedCreateNestedManyWithoutStudentInput
    AppliedInstitution?: AppliedInstitutionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentUpdateInput = {
    studentId?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    forms?: FormUpdateManyWithoutStudentNestedInput
    AppliedInstitution?: AppliedInstitutionUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateInput = {
    studentId?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    forms?: FormUncheckedUpdateManyWithoutStudentNestedInput
    AppliedInstitution?: AppliedInstitutionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentCreateManyInput = {
    studentId?: string
    fullName: string
    email: string
    phone?: string | null
    password: string
    address?: string | null
    role?: string
    dob: Date | string
    profile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudentUpdateManyMutationInput = {
    studentId?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentUncheckedUpdateManyInput = {
    studentId?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FormCreateInput = {
    formId?: string
    board: string
    reg: number
    hscRoll: number
    sscRoll: number
    hscGPA: number
    sscGPA: number
    student: StudentCreateNestedOneWithoutFormsInput
  }

  export type FormUncheckedCreateInput = {
    formId?: string
    studentId: string
    board: string
    reg: number
    hscRoll: number
    sscRoll: number
    hscGPA: number
    sscGPA: number
  }

  export type FormUpdateInput = {
    formId?: StringFieldUpdateOperationsInput | string
    board?: StringFieldUpdateOperationsInput | string
    reg?: IntFieldUpdateOperationsInput | number
    hscRoll?: IntFieldUpdateOperationsInput | number
    sscRoll?: IntFieldUpdateOperationsInput | number
    hscGPA?: FloatFieldUpdateOperationsInput | number
    sscGPA?: FloatFieldUpdateOperationsInput | number
    student?: StudentUpdateOneRequiredWithoutFormsNestedInput
  }

  export type FormUncheckedUpdateInput = {
    formId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    board?: StringFieldUpdateOperationsInput | string
    reg?: IntFieldUpdateOperationsInput | number
    hscRoll?: IntFieldUpdateOperationsInput | number
    sscRoll?: IntFieldUpdateOperationsInput | number
    hscGPA?: FloatFieldUpdateOperationsInput | number
    sscGPA?: FloatFieldUpdateOperationsInput | number
  }

  export type FormCreateManyInput = {
    formId?: string
    studentId: string
    board: string
    reg: number
    hscRoll: number
    sscRoll: number
    hscGPA: number
    sscGPA: number
  }

  export type FormUpdateManyMutationInput = {
    formId?: StringFieldUpdateOperationsInput | string
    board?: StringFieldUpdateOperationsInput | string
    reg?: IntFieldUpdateOperationsInput | number
    hscRoll?: IntFieldUpdateOperationsInput | number
    sscRoll?: IntFieldUpdateOperationsInput | number
    hscGPA?: FloatFieldUpdateOperationsInput | number
    sscGPA?: FloatFieldUpdateOperationsInput | number
  }

  export type FormUncheckedUpdateManyInput = {
    formId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    board?: StringFieldUpdateOperationsInput | string
    reg?: IntFieldUpdateOperationsInput | number
    hscRoll?: IntFieldUpdateOperationsInput | number
    sscRoll?: IntFieldUpdateOperationsInput | number
    hscGPA?: FloatFieldUpdateOperationsInput | number
    sscGPA?: FloatFieldUpdateOperationsInput | number
  }

  export type AdminCreateInput = {
    adminId?: string
    email: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminUncheckedCreateInput = {
    adminId?: string
    email: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminUpdateInput = {
    adminId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUncheckedUpdateInput = {
    adminId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminCreateManyInput = {
    adminId?: string
    email: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminUpdateManyMutationInput = {
    adminId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUncheckedUpdateManyInput = {
    adminId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InstitutionCreateInput = {
    institutionId?: string
    name: string
    requirementsHscGPA: number
    requirementsSscGPA: number
    institutionForms?: InstitutionFormCreateNestedManyWithoutInstitutionInput
    AppliedInstitution?: AppliedInstitutionCreateNestedManyWithoutInstitutionInput
    InstitutionCategory?: InstitutionCategoryCreateNestedOneWithoutInstitutionsInput
  }

  export type InstitutionUncheckedCreateInput = {
    institutionId?: string
    name: string
    requirementsHscGPA: number
    requirementsSscGPA: number
    institutionCategoryInstitutionCategoryId?: string | null
    institutionForms?: InstitutionFormUncheckedCreateNestedManyWithoutInstitutionInput
    AppliedInstitution?: AppliedInstitutionUncheckedCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionUpdateInput = {
    institutionId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    requirementsHscGPA?: FloatFieldUpdateOperationsInput | number
    requirementsSscGPA?: FloatFieldUpdateOperationsInput | number
    institutionForms?: InstitutionFormUpdateManyWithoutInstitutionNestedInput
    AppliedInstitution?: AppliedInstitutionUpdateManyWithoutInstitutionNestedInput
    InstitutionCategory?: InstitutionCategoryUpdateOneWithoutInstitutionsNestedInput
  }

  export type InstitutionUncheckedUpdateInput = {
    institutionId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    requirementsHscGPA?: FloatFieldUpdateOperationsInput | number
    requirementsSscGPA?: FloatFieldUpdateOperationsInput | number
    institutionCategoryInstitutionCategoryId?: NullableStringFieldUpdateOperationsInput | string | null
    institutionForms?: InstitutionFormUncheckedUpdateManyWithoutInstitutionNestedInput
    AppliedInstitution?: AppliedInstitutionUncheckedUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionCreateManyInput = {
    institutionId?: string
    name: string
    requirementsHscGPA: number
    requirementsSscGPA: number
    institutionCategoryInstitutionCategoryId?: string | null
  }

  export type InstitutionUpdateManyMutationInput = {
    institutionId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    requirementsHscGPA?: FloatFieldUpdateOperationsInput | number
    requirementsSscGPA?: FloatFieldUpdateOperationsInput | number
  }

  export type InstitutionUncheckedUpdateManyInput = {
    institutionId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    requirementsHscGPA?: FloatFieldUpdateOperationsInput | number
    requirementsSscGPA?: FloatFieldUpdateOperationsInput | number
    institutionCategoryInstitutionCategoryId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InstitutionCategoryCreateInput = {
    institutionCategoryId?: string
    name: string
    description: string
    institutions?: InstitutionCreateNestedManyWithoutInstitutionCategoryInput
  }

  export type InstitutionCategoryUncheckedCreateInput = {
    institutionCategoryId?: string
    name: string
    description: string
    institutions?: InstitutionUncheckedCreateNestedManyWithoutInstitutionCategoryInput
  }

  export type InstitutionCategoryUpdateInput = {
    institutionCategoryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    institutions?: InstitutionUpdateManyWithoutInstitutionCategoryNestedInput
  }

  export type InstitutionCategoryUncheckedUpdateInput = {
    institutionCategoryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    institutions?: InstitutionUncheckedUpdateManyWithoutInstitutionCategoryNestedInput
  }

  export type InstitutionCategoryCreateManyInput = {
    institutionCategoryId?: string
    name: string
    description: string
  }

  export type InstitutionCategoryUpdateManyMutationInput = {
    institutionCategoryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type InstitutionCategoryUncheckedUpdateManyInput = {
    institutionCategoryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type InstitutionFormCreateInput = {
    institutionFormId?: string
    fieldName: string
    fieldType: string
    isRequired?: boolean
    institution: InstitutionCreateNestedOneWithoutInstitutionFormsInput
  }

  export type InstitutionFormUncheckedCreateInput = {
    institutionFormId?: string
    institutionId: string
    fieldName: string
    fieldType: string
    isRequired?: boolean
  }

  export type InstitutionFormUpdateInput = {
    institutionFormId?: StringFieldUpdateOperationsInput | string
    fieldName?: StringFieldUpdateOperationsInput | string
    fieldType?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    institution?: InstitutionUpdateOneRequiredWithoutInstitutionFormsNestedInput
  }

  export type InstitutionFormUncheckedUpdateInput = {
    institutionFormId?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    fieldName?: StringFieldUpdateOperationsInput | string
    fieldType?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InstitutionFormCreateManyInput = {
    institutionFormId?: string
    institutionId: string
    fieldName: string
    fieldType: string
    isRequired?: boolean
  }

  export type InstitutionFormUpdateManyMutationInput = {
    institutionFormId?: StringFieldUpdateOperationsInput | string
    fieldName?: StringFieldUpdateOperationsInput | string
    fieldType?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InstitutionFormUncheckedUpdateManyInput = {
    institutionFormId?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    fieldName?: StringFieldUpdateOperationsInput | string
    fieldType?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AppliedInstitutionCreateInput = {
    id?: string
    student: StudentCreateNestedOneWithoutAppliedInstitutionInput
    institution: InstitutionCreateNestedOneWithoutAppliedInstitutionInput
  }

  export type AppliedInstitutionUncheckedCreateInput = {
    id?: string
    studentId: string
    institutionId: string
  }

  export type AppliedInstitutionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    student?: StudentUpdateOneRequiredWithoutAppliedInstitutionNestedInput
    institution?: InstitutionUpdateOneRequiredWithoutAppliedInstitutionNestedInput
  }

  export type AppliedInstitutionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
  }

  export type AppliedInstitutionCreateManyInput = {
    id?: string
    studentId: string
    institutionId: string
  }

  export type AppliedInstitutionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type AppliedInstitutionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FormListRelationFilter = {
    every?: FormWhereInput
    some?: FormWhereInput
    none?: FormWhereInput
  }

  export type AppliedInstitutionListRelationFilter = {
    every?: AppliedInstitutionWhereInput
    some?: AppliedInstitutionWhereInput
    none?: AppliedInstitutionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type FormOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AppliedInstitutionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentCountOrderByAggregateInput = {
    studentId?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    password?: SortOrder
    address?: SortOrder
    role?: SortOrder
    dob?: SortOrder
    profile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StudentMaxOrderByAggregateInput = {
    studentId?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    password?: SortOrder
    address?: SortOrder
    role?: SortOrder
    dob?: SortOrder
    profile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StudentMinOrderByAggregateInput = {
    studentId?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    password?: SortOrder
    address?: SortOrder
    role?: SortOrder
    dob?: SortOrder
    profile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type StudentScalarRelationFilter = {
    is?: StudentWhereInput
    isNot?: StudentWhereInput
  }

  export type FormCountOrderByAggregateInput = {
    formId?: SortOrder
    studentId?: SortOrder
    board?: SortOrder
    reg?: SortOrder
    hscRoll?: SortOrder
    sscRoll?: SortOrder
    hscGPA?: SortOrder
    sscGPA?: SortOrder
  }

  export type FormAvgOrderByAggregateInput = {
    reg?: SortOrder
    hscRoll?: SortOrder
    sscRoll?: SortOrder
    hscGPA?: SortOrder
    sscGPA?: SortOrder
  }

  export type FormMaxOrderByAggregateInput = {
    formId?: SortOrder
    studentId?: SortOrder
    board?: SortOrder
    reg?: SortOrder
    hscRoll?: SortOrder
    sscRoll?: SortOrder
    hscGPA?: SortOrder
    sscGPA?: SortOrder
  }

  export type FormMinOrderByAggregateInput = {
    formId?: SortOrder
    studentId?: SortOrder
    board?: SortOrder
    reg?: SortOrder
    hscRoll?: SortOrder
    sscRoll?: SortOrder
    hscGPA?: SortOrder
    sscGPA?: SortOrder
  }

  export type FormSumOrderByAggregateInput = {
    reg?: SortOrder
    hscRoll?: SortOrder
    sscRoll?: SortOrder
    hscGPA?: SortOrder
    sscGPA?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type AdminCountOrderByAggregateInput = {
    adminId?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    adminId?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    adminId?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InstitutionFormListRelationFilter = {
    every?: InstitutionFormWhereInput
    some?: InstitutionFormWhereInput
    none?: InstitutionFormWhereInput
  }

  export type InstitutionCategoryNullableScalarRelationFilter = {
    is?: InstitutionCategoryWhereInput | null
    isNot?: InstitutionCategoryWhereInput | null
  }

  export type InstitutionFormOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InstitutionCountOrderByAggregateInput = {
    institutionId?: SortOrder
    name?: SortOrder
    requirementsHscGPA?: SortOrder
    requirementsSscGPA?: SortOrder
    institutionCategoryInstitutionCategoryId?: SortOrder
  }

  export type InstitutionAvgOrderByAggregateInput = {
    requirementsHscGPA?: SortOrder
    requirementsSscGPA?: SortOrder
  }

  export type InstitutionMaxOrderByAggregateInput = {
    institutionId?: SortOrder
    name?: SortOrder
    requirementsHscGPA?: SortOrder
    requirementsSscGPA?: SortOrder
    institutionCategoryInstitutionCategoryId?: SortOrder
  }

  export type InstitutionMinOrderByAggregateInput = {
    institutionId?: SortOrder
    name?: SortOrder
    requirementsHscGPA?: SortOrder
    requirementsSscGPA?: SortOrder
    institutionCategoryInstitutionCategoryId?: SortOrder
  }

  export type InstitutionSumOrderByAggregateInput = {
    requirementsHscGPA?: SortOrder
    requirementsSscGPA?: SortOrder
  }

  export type InstitutionListRelationFilter = {
    every?: InstitutionWhereInput
    some?: InstitutionWhereInput
    none?: InstitutionWhereInput
  }

  export type InstitutionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InstitutionCategoryCountOrderByAggregateInput = {
    institutionCategoryId?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type InstitutionCategoryMaxOrderByAggregateInput = {
    institutionCategoryId?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type InstitutionCategoryMinOrderByAggregateInput = {
    institutionCategoryId?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type InstitutionScalarRelationFilter = {
    is?: InstitutionWhereInput
    isNot?: InstitutionWhereInput
  }

  export type InstitutionFormCountOrderByAggregateInput = {
    institutionFormId?: SortOrder
    institutionId?: SortOrder
    fieldName?: SortOrder
    fieldType?: SortOrder
    isRequired?: SortOrder
  }

  export type InstitutionFormMaxOrderByAggregateInput = {
    institutionFormId?: SortOrder
    institutionId?: SortOrder
    fieldName?: SortOrder
    fieldType?: SortOrder
    isRequired?: SortOrder
  }

  export type InstitutionFormMinOrderByAggregateInput = {
    institutionFormId?: SortOrder
    institutionId?: SortOrder
    fieldName?: SortOrder
    fieldType?: SortOrder
    isRequired?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type AppliedInstitutionCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    institutionId?: SortOrder
  }

  export type AppliedInstitutionMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    institutionId?: SortOrder
  }

  export type AppliedInstitutionMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    institutionId?: SortOrder
  }

  export type FormCreateNestedManyWithoutStudentInput = {
    create?: XOR<FormCreateWithoutStudentInput, FormUncheckedCreateWithoutStudentInput> | FormCreateWithoutStudentInput[] | FormUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: FormCreateOrConnectWithoutStudentInput | FormCreateOrConnectWithoutStudentInput[]
    createMany?: FormCreateManyStudentInputEnvelope
    connect?: FormWhereUniqueInput | FormWhereUniqueInput[]
  }

  export type AppliedInstitutionCreateNestedManyWithoutStudentInput = {
    create?: XOR<AppliedInstitutionCreateWithoutStudentInput, AppliedInstitutionUncheckedCreateWithoutStudentInput> | AppliedInstitutionCreateWithoutStudentInput[] | AppliedInstitutionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AppliedInstitutionCreateOrConnectWithoutStudentInput | AppliedInstitutionCreateOrConnectWithoutStudentInput[]
    createMany?: AppliedInstitutionCreateManyStudentInputEnvelope
    connect?: AppliedInstitutionWhereUniqueInput | AppliedInstitutionWhereUniqueInput[]
  }

  export type FormUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<FormCreateWithoutStudentInput, FormUncheckedCreateWithoutStudentInput> | FormCreateWithoutStudentInput[] | FormUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: FormCreateOrConnectWithoutStudentInput | FormCreateOrConnectWithoutStudentInput[]
    createMany?: FormCreateManyStudentInputEnvelope
    connect?: FormWhereUniqueInput | FormWhereUniqueInput[]
  }

  export type AppliedInstitutionUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<AppliedInstitutionCreateWithoutStudentInput, AppliedInstitutionUncheckedCreateWithoutStudentInput> | AppliedInstitutionCreateWithoutStudentInput[] | AppliedInstitutionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AppliedInstitutionCreateOrConnectWithoutStudentInput | AppliedInstitutionCreateOrConnectWithoutStudentInput[]
    createMany?: AppliedInstitutionCreateManyStudentInputEnvelope
    connect?: AppliedInstitutionWhereUniqueInput | AppliedInstitutionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type FormUpdateManyWithoutStudentNestedInput = {
    create?: XOR<FormCreateWithoutStudentInput, FormUncheckedCreateWithoutStudentInput> | FormCreateWithoutStudentInput[] | FormUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: FormCreateOrConnectWithoutStudentInput | FormCreateOrConnectWithoutStudentInput[]
    upsert?: FormUpsertWithWhereUniqueWithoutStudentInput | FormUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: FormCreateManyStudentInputEnvelope
    set?: FormWhereUniqueInput | FormWhereUniqueInput[]
    disconnect?: FormWhereUniqueInput | FormWhereUniqueInput[]
    delete?: FormWhereUniqueInput | FormWhereUniqueInput[]
    connect?: FormWhereUniqueInput | FormWhereUniqueInput[]
    update?: FormUpdateWithWhereUniqueWithoutStudentInput | FormUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: FormUpdateManyWithWhereWithoutStudentInput | FormUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: FormScalarWhereInput | FormScalarWhereInput[]
  }

  export type AppliedInstitutionUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AppliedInstitutionCreateWithoutStudentInput, AppliedInstitutionUncheckedCreateWithoutStudentInput> | AppliedInstitutionCreateWithoutStudentInput[] | AppliedInstitutionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AppliedInstitutionCreateOrConnectWithoutStudentInput | AppliedInstitutionCreateOrConnectWithoutStudentInput[]
    upsert?: AppliedInstitutionUpsertWithWhereUniqueWithoutStudentInput | AppliedInstitutionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AppliedInstitutionCreateManyStudentInputEnvelope
    set?: AppliedInstitutionWhereUniqueInput | AppliedInstitutionWhereUniqueInput[]
    disconnect?: AppliedInstitutionWhereUniqueInput | AppliedInstitutionWhereUniqueInput[]
    delete?: AppliedInstitutionWhereUniqueInput | AppliedInstitutionWhereUniqueInput[]
    connect?: AppliedInstitutionWhereUniqueInput | AppliedInstitutionWhereUniqueInput[]
    update?: AppliedInstitutionUpdateWithWhereUniqueWithoutStudentInput | AppliedInstitutionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AppliedInstitutionUpdateManyWithWhereWithoutStudentInput | AppliedInstitutionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AppliedInstitutionScalarWhereInput | AppliedInstitutionScalarWhereInput[]
  }

  export type FormUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<FormCreateWithoutStudentInput, FormUncheckedCreateWithoutStudentInput> | FormCreateWithoutStudentInput[] | FormUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: FormCreateOrConnectWithoutStudentInput | FormCreateOrConnectWithoutStudentInput[]
    upsert?: FormUpsertWithWhereUniqueWithoutStudentInput | FormUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: FormCreateManyStudentInputEnvelope
    set?: FormWhereUniqueInput | FormWhereUniqueInput[]
    disconnect?: FormWhereUniqueInput | FormWhereUniqueInput[]
    delete?: FormWhereUniqueInput | FormWhereUniqueInput[]
    connect?: FormWhereUniqueInput | FormWhereUniqueInput[]
    update?: FormUpdateWithWhereUniqueWithoutStudentInput | FormUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: FormUpdateManyWithWhereWithoutStudentInput | FormUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: FormScalarWhereInput | FormScalarWhereInput[]
  }

  export type AppliedInstitutionUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AppliedInstitutionCreateWithoutStudentInput, AppliedInstitutionUncheckedCreateWithoutStudentInput> | AppliedInstitutionCreateWithoutStudentInput[] | AppliedInstitutionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AppliedInstitutionCreateOrConnectWithoutStudentInput | AppliedInstitutionCreateOrConnectWithoutStudentInput[]
    upsert?: AppliedInstitutionUpsertWithWhereUniqueWithoutStudentInput | AppliedInstitutionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AppliedInstitutionCreateManyStudentInputEnvelope
    set?: AppliedInstitutionWhereUniqueInput | AppliedInstitutionWhereUniqueInput[]
    disconnect?: AppliedInstitutionWhereUniqueInput | AppliedInstitutionWhereUniqueInput[]
    delete?: AppliedInstitutionWhereUniqueInput | AppliedInstitutionWhereUniqueInput[]
    connect?: AppliedInstitutionWhereUniqueInput | AppliedInstitutionWhereUniqueInput[]
    update?: AppliedInstitutionUpdateWithWhereUniqueWithoutStudentInput | AppliedInstitutionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AppliedInstitutionUpdateManyWithWhereWithoutStudentInput | AppliedInstitutionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AppliedInstitutionScalarWhereInput | AppliedInstitutionScalarWhereInput[]
  }

  export type StudentCreateNestedOneWithoutFormsInput = {
    create?: XOR<StudentCreateWithoutFormsInput, StudentUncheckedCreateWithoutFormsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutFormsInput
    connect?: StudentWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StudentUpdateOneRequiredWithoutFormsNestedInput = {
    create?: XOR<StudentCreateWithoutFormsInput, StudentUncheckedCreateWithoutFormsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutFormsInput
    upsert?: StudentUpsertWithoutFormsInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutFormsInput, StudentUpdateWithoutFormsInput>, StudentUncheckedUpdateWithoutFormsInput>
  }

  export type InstitutionFormCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<InstitutionFormCreateWithoutInstitutionInput, InstitutionFormUncheckedCreateWithoutInstitutionInput> | InstitutionFormCreateWithoutInstitutionInput[] | InstitutionFormUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: InstitutionFormCreateOrConnectWithoutInstitutionInput | InstitutionFormCreateOrConnectWithoutInstitutionInput[]
    createMany?: InstitutionFormCreateManyInstitutionInputEnvelope
    connect?: InstitutionFormWhereUniqueInput | InstitutionFormWhereUniqueInput[]
  }

  export type AppliedInstitutionCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<AppliedInstitutionCreateWithoutInstitutionInput, AppliedInstitutionUncheckedCreateWithoutInstitutionInput> | AppliedInstitutionCreateWithoutInstitutionInput[] | AppliedInstitutionUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: AppliedInstitutionCreateOrConnectWithoutInstitutionInput | AppliedInstitutionCreateOrConnectWithoutInstitutionInput[]
    createMany?: AppliedInstitutionCreateManyInstitutionInputEnvelope
    connect?: AppliedInstitutionWhereUniqueInput | AppliedInstitutionWhereUniqueInput[]
  }

  export type InstitutionCategoryCreateNestedOneWithoutInstitutionsInput = {
    create?: XOR<InstitutionCategoryCreateWithoutInstitutionsInput, InstitutionCategoryUncheckedCreateWithoutInstitutionsInput>
    connectOrCreate?: InstitutionCategoryCreateOrConnectWithoutInstitutionsInput
    connect?: InstitutionCategoryWhereUniqueInput
  }

  export type InstitutionFormUncheckedCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<InstitutionFormCreateWithoutInstitutionInput, InstitutionFormUncheckedCreateWithoutInstitutionInput> | InstitutionFormCreateWithoutInstitutionInput[] | InstitutionFormUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: InstitutionFormCreateOrConnectWithoutInstitutionInput | InstitutionFormCreateOrConnectWithoutInstitutionInput[]
    createMany?: InstitutionFormCreateManyInstitutionInputEnvelope
    connect?: InstitutionFormWhereUniqueInput | InstitutionFormWhereUniqueInput[]
  }

  export type AppliedInstitutionUncheckedCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<AppliedInstitutionCreateWithoutInstitutionInput, AppliedInstitutionUncheckedCreateWithoutInstitutionInput> | AppliedInstitutionCreateWithoutInstitutionInput[] | AppliedInstitutionUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: AppliedInstitutionCreateOrConnectWithoutInstitutionInput | AppliedInstitutionCreateOrConnectWithoutInstitutionInput[]
    createMany?: AppliedInstitutionCreateManyInstitutionInputEnvelope
    connect?: AppliedInstitutionWhereUniqueInput | AppliedInstitutionWhereUniqueInput[]
  }

  export type InstitutionFormUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<InstitutionFormCreateWithoutInstitutionInput, InstitutionFormUncheckedCreateWithoutInstitutionInput> | InstitutionFormCreateWithoutInstitutionInput[] | InstitutionFormUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: InstitutionFormCreateOrConnectWithoutInstitutionInput | InstitutionFormCreateOrConnectWithoutInstitutionInput[]
    upsert?: InstitutionFormUpsertWithWhereUniqueWithoutInstitutionInput | InstitutionFormUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: InstitutionFormCreateManyInstitutionInputEnvelope
    set?: InstitutionFormWhereUniqueInput | InstitutionFormWhereUniqueInput[]
    disconnect?: InstitutionFormWhereUniqueInput | InstitutionFormWhereUniqueInput[]
    delete?: InstitutionFormWhereUniqueInput | InstitutionFormWhereUniqueInput[]
    connect?: InstitutionFormWhereUniqueInput | InstitutionFormWhereUniqueInput[]
    update?: InstitutionFormUpdateWithWhereUniqueWithoutInstitutionInput | InstitutionFormUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: InstitutionFormUpdateManyWithWhereWithoutInstitutionInput | InstitutionFormUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: InstitutionFormScalarWhereInput | InstitutionFormScalarWhereInput[]
  }

  export type AppliedInstitutionUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<AppliedInstitutionCreateWithoutInstitutionInput, AppliedInstitutionUncheckedCreateWithoutInstitutionInput> | AppliedInstitutionCreateWithoutInstitutionInput[] | AppliedInstitutionUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: AppliedInstitutionCreateOrConnectWithoutInstitutionInput | AppliedInstitutionCreateOrConnectWithoutInstitutionInput[]
    upsert?: AppliedInstitutionUpsertWithWhereUniqueWithoutInstitutionInput | AppliedInstitutionUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: AppliedInstitutionCreateManyInstitutionInputEnvelope
    set?: AppliedInstitutionWhereUniqueInput | AppliedInstitutionWhereUniqueInput[]
    disconnect?: AppliedInstitutionWhereUniqueInput | AppliedInstitutionWhereUniqueInput[]
    delete?: AppliedInstitutionWhereUniqueInput | AppliedInstitutionWhereUniqueInput[]
    connect?: AppliedInstitutionWhereUniqueInput | AppliedInstitutionWhereUniqueInput[]
    update?: AppliedInstitutionUpdateWithWhereUniqueWithoutInstitutionInput | AppliedInstitutionUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: AppliedInstitutionUpdateManyWithWhereWithoutInstitutionInput | AppliedInstitutionUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: AppliedInstitutionScalarWhereInput | AppliedInstitutionScalarWhereInput[]
  }

  export type InstitutionCategoryUpdateOneWithoutInstitutionsNestedInput = {
    create?: XOR<InstitutionCategoryCreateWithoutInstitutionsInput, InstitutionCategoryUncheckedCreateWithoutInstitutionsInput>
    connectOrCreate?: InstitutionCategoryCreateOrConnectWithoutInstitutionsInput
    upsert?: InstitutionCategoryUpsertWithoutInstitutionsInput
    disconnect?: InstitutionCategoryWhereInput | boolean
    delete?: InstitutionCategoryWhereInput | boolean
    connect?: InstitutionCategoryWhereUniqueInput
    update?: XOR<XOR<InstitutionCategoryUpdateToOneWithWhereWithoutInstitutionsInput, InstitutionCategoryUpdateWithoutInstitutionsInput>, InstitutionCategoryUncheckedUpdateWithoutInstitutionsInput>
  }

  export type InstitutionFormUncheckedUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<InstitutionFormCreateWithoutInstitutionInput, InstitutionFormUncheckedCreateWithoutInstitutionInput> | InstitutionFormCreateWithoutInstitutionInput[] | InstitutionFormUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: InstitutionFormCreateOrConnectWithoutInstitutionInput | InstitutionFormCreateOrConnectWithoutInstitutionInput[]
    upsert?: InstitutionFormUpsertWithWhereUniqueWithoutInstitutionInput | InstitutionFormUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: InstitutionFormCreateManyInstitutionInputEnvelope
    set?: InstitutionFormWhereUniqueInput | InstitutionFormWhereUniqueInput[]
    disconnect?: InstitutionFormWhereUniqueInput | InstitutionFormWhereUniqueInput[]
    delete?: InstitutionFormWhereUniqueInput | InstitutionFormWhereUniqueInput[]
    connect?: InstitutionFormWhereUniqueInput | InstitutionFormWhereUniqueInput[]
    update?: InstitutionFormUpdateWithWhereUniqueWithoutInstitutionInput | InstitutionFormUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: InstitutionFormUpdateManyWithWhereWithoutInstitutionInput | InstitutionFormUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: InstitutionFormScalarWhereInput | InstitutionFormScalarWhereInput[]
  }

  export type AppliedInstitutionUncheckedUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<AppliedInstitutionCreateWithoutInstitutionInput, AppliedInstitutionUncheckedCreateWithoutInstitutionInput> | AppliedInstitutionCreateWithoutInstitutionInput[] | AppliedInstitutionUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: AppliedInstitutionCreateOrConnectWithoutInstitutionInput | AppliedInstitutionCreateOrConnectWithoutInstitutionInput[]
    upsert?: AppliedInstitutionUpsertWithWhereUniqueWithoutInstitutionInput | AppliedInstitutionUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: AppliedInstitutionCreateManyInstitutionInputEnvelope
    set?: AppliedInstitutionWhereUniqueInput | AppliedInstitutionWhereUniqueInput[]
    disconnect?: AppliedInstitutionWhereUniqueInput | AppliedInstitutionWhereUniqueInput[]
    delete?: AppliedInstitutionWhereUniqueInput | AppliedInstitutionWhereUniqueInput[]
    connect?: AppliedInstitutionWhereUniqueInput | AppliedInstitutionWhereUniqueInput[]
    update?: AppliedInstitutionUpdateWithWhereUniqueWithoutInstitutionInput | AppliedInstitutionUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: AppliedInstitutionUpdateManyWithWhereWithoutInstitutionInput | AppliedInstitutionUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: AppliedInstitutionScalarWhereInput | AppliedInstitutionScalarWhereInput[]
  }

  export type InstitutionCreateNestedManyWithoutInstitutionCategoryInput = {
    create?: XOR<InstitutionCreateWithoutInstitutionCategoryInput, InstitutionUncheckedCreateWithoutInstitutionCategoryInput> | InstitutionCreateWithoutInstitutionCategoryInput[] | InstitutionUncheckedCreateWithoutInstitutionCategoryInput[]
    connectOrCreate?: InstitutionCreateOrConnectWithoutInstitutionCategoryInput | InstitutionCreateOrConnectWithoutInstitutionCategoryInput[]
    createMany?: InstitutionCreateManyInstitutionCategoryInputEnvelope
    connect?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
  }

  export type InstitutionUncheckedCreateNestedManyWithoutInstitutionCategoryInput = {
    create?: XOR<InstitutionCreateWithoutInstitutionCategoryInput, InstitutionUncheckedCreateWithoutInstitutionCategoryInput> | InstitutionCreateWithoutInstitutionCategoryInput[] | InstitutionUncheckedCreateWithoutInstitutionCategoryInput[]
    connectOrCreate?: InstitutionCreateOrConnectWithoutInstitutionCategoryInput | InstitutionCreateOrConnectWithoutInstitutionCategoryInput[]
    createMany?: InstitutionCreateManyInstitutionCategoryInputEnvelope
    connect?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
  }

  export type InstitutionUpdateManyWithoutInstitutionCategoryNestedInput = {
    create?: XOR<InstitutionCreateWithoutInstitutionCategoryInput, InstitutionUncheckedCreateWithoutInstitutionCategoryInput> | InstitutionCreateWithoutInstitutionCategoryInput[] | InstitutionUncheckedCreateWithoutInstitutionCategoryInput[]
    connectOrCreate?: InstitutionCreateOrConnectWithoutInstitutionCategoryInput | InstitutionCreateOrConnectWithoutInstitutionCategoryInput[]
    upsert?: InstitutionUpsertWithWhereUniqueWithoutInstitutionCategoryInput | InstitutionUpsertWithWhereUniqueWithoutInstitutionCategoryInput[]
    createMany?: InstitutionCreateManyInstitutionCategoryInputEnvelope
    set?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    disconnect?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    delete?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    connect?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    update?: InstitutionUpdateWithWhereUniqueWithoutInstitutionCategoryInput | InstitutionUpdateWithWhereUniqueWithoutInstitutionCategoryInput[]
    updateMany?: InstitutionUpdateManyWithWhereWithoutInstitutionCategoryInput | InstitutionUpdateManyWithWhereWithoutInstitutionCategoryInput[]
    deleteMany?: InstitutionScalarWhereInput | InstitutionScalarWhereInput[]
  }

  export type InstitutionUncheckedUpdateManyWithoutInstitutionCategoryNestedInput = {
    create?: XOR<InstitutionCreateWithoutInstitutionCategoryInput, InstitutionUncheckedCreateWithoutInstitutionCategoryInput> | InstitutionCreateWithoutInstitutionCategoryInput[] | InstitutionUncheckedCreateWithoutInstitutionCategoryInput[]
    connectOrCreate?: InstitutionCreateOrConnectWithoutInstitutionCategoryInput | InstitutionCreateOrConnectWithoutInstitutionCategoryInput[]
    upsert?: InstitutionUpsertWithWhereUniqueWithoutInstitutionCategoryInput | InstitutionUpsertWithWhereUniqueWithoutInstitutionCategoryInput[]
    createMany?: InstitutionCreateManyInstitutionCategoryInputEnvelope
    set?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    disconnect?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    delete?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    connect?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    update?: InstitutionUpdateWithWhereUniqueWithoutInstitutionCategoryInput | InstitutionUpdateWithWhereUniqueWithoutInstitutionCategoryInput[]
    updateMany?: InstitutionUpdateManyWithWhereWithoutInstitutionCategoryInput | InstitutionUpdateManyWithWhereWithoutInstitutionCategoryInput[]
    deleteMany?: InstitutionScalarWhereInput | InstitutionScalarWhereInput[]
  }

  export type InstitutionCreateNestedOneWithoutInstitutionFormsInput = {
    create?: XOR<InstitutionCreateWithoutInstitutionFormsInput, InstitutionUncheckedCreateWithoutInstitutionFormsInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutInstitutionFormsInput
    connect?: InstitutionWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type InstitutionUpdateOneRequiredWithoutInstitutionFormsNestedInput = {
    create?: XOR<InstitutionCreateWithoutInstitutionFormsInput, InstitutionUncheckedCreateWithoutInstitutionFormsInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutInstitutionFormsInput
    upsert?: InstitutionUpsertWithoutInstitutionFormsInput
    connect?: InstitutionWhereUniqueInput
    update?: XOR<XOR<InstitutionUpdateToOneWithWhereWithoutInstitutionFormsInput, InstitutionUpdateWithoutInstitutionFormsInput>, InstitutionUncheckedUpdateWithoutInstitutionFormsInput>
  }

  export type StudentCreateNestedOneWithoutAppliedInstitutionInput = {
    create?: XOR<StudentCreateWithoutAppliedInstitutionInput, StudentUncheckedCreateWithoutAppliedInstitutionInput>
    connectOrCreate?: StudentCreateOrConnectWithoutAppliedInstitutionInput
    connect?: StudentWhereUniqueInput
  }

  export type InstitutionCreateNestedOneWithoutAppliedInstitutionInput = {
    create?: XOR<InstitutionCreateWithoutAppliedInstitutionInput, InstitutionUncheckedCreateWithoutAppliedInstitutionInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutAppliedInstitutionInput
    connect?: InstitutionWhereUniqueInput
  }

  export type StudentUpdateOneRequiredWithoutAppliedInstitutionNestedInput = {
    create?: XOR<StudentCreateWithoutAppliedInstitutionInput, StudentUncheckedCreateWithoutAppliedInstitutionInput>
    connectOrCreate?: StudentCreateOrConnectWithoutAppliedInstitutionInput
    upsert?: StudentUpsertWithoutAppliedInstitutionInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutAppliedInstitutionInput, StudentUpdateWithoutAppliedInstitutionInput>, StudentUncheckedUpdateWithoutAppliedInstitutionInput>
  }

  export type InstitutionUpdateOneRequiredWithoutAppliedInstitutionNestedInput = {
    create?: XOR<InstitutionCreateWithoutAppliedInstitutionInput, InstitutionUncheckedCreateWithoutAppliedInstitutionInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutAppliedInstitutionInput
    upsert?: InstitutionUpsertWithoutAppliedInstitutionInput
    connect?: InstitutionWhereUniqueInput
    update?: XOR<XOR<InstitutionUpdateToOneWithWhereWithoutAppliedInstitutionInput, InstitutionUpdateWithoutAppliedInstitutionInput>, InstitutionUncheckedUpdateWithoutAppliedInstitutionInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type FormCreateWithoutStudentInput = {
    formId?: string
    board: string
    reg: number
    hscRoll: number
    sscRoll: number
    hscGPA: number
    sscGPA: number
  }

  export type FormUncheckedCreateWithoutStudentInput = {
    formId?: string
    board: string
    reg: number
    hscRoll: number
    sscRoll: number
    hscGPA: number
    sscGPA: number
  }

  export type FormCreateOrConnectWithoutStudentInput = {
    where: FormWhereUniqueInput
    create: XOR<FormCreateWithoutStudentInput, FormUncheckedCreateWithoutStudentInput>
  }

  export type FormCreateManyStudentInputEnvelope = {
    data: FormCreateManyStudentInput | FormCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type AppliedInstitutionCreateWithoutStudentInput = {
    id?: string
    institution: InstitutionCreateNestedOneWithoutAppliedInstitutionInput
  }

  export type AppliedInstitutionUncheckedCreateWithoutStudentInput = {
    id?: string
    institutionId: string
  }

  export type AppliedInstitutionCreateOrConnectWithoutStudentInput = {
    where: AppliedInstitutionWhereUniqueInput
    create: XOR<AppliedInstitutionCreateWithoutStudentInput, AppliedInstitutionUncheckedCreateWithoutStudentInput>
  }

  export type AppliedInstitutionCreateManyStudentInputEnvelope = {
    data: AppliedInstitutionCreateManyStudentInput | AppliedInstitutionCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type FormUpsertWithWhereUniqueWithoutStudentInput = {
    where: FormWhereUniqueInput
    update: XOR<FormUpdateWithoutStudentInput, FormUncheckedUpdateWithoutStudentInput>
    create: XOR<FormCreateWithoutStudentInput, FormUncheckedCreateWithoutStudentInput>
  }

  export type FormUpdateWithWhereUniqueWithoutStudentInput = {
    where: FormWhereUniqueInput
    data: XOR<FormUpdateWithoutStudentInput, FormUncheckedUpdateWithoutStudentInput>
  }

  export type FormUpdateManyWithWhereWithoutStudentInput = {
    where: FormScalarWhereInput
    data: XOR<FormUpdateManyMutationInput, FormUncheckedUpdateManyWithoutStudentInput>
  }

  export type FormScalarWhereInput = {
    AND?: FormScalarWhereInput | FormScalarWhereInput[]
    OR?: FormScalarWhereInput[]
    NOT?: FormScalarWhereInput | FormScalarWhereInput[]
    formId?: StringFilter<"Form"> | string
    studentId?: StringFilter<"Form"> | string
    board?: StringFilter<"Form"> | string
    reg?: IntFilter<"Form"> | number
    hscRoll?: IntFilter<"Form"> | number
    sscRoll?: IntFilter<"Form"> | number
    hscGPA?: FloatFilter<"Form"> | number
    sscGPA?: FloatFilter<"Form"> | number
  }

  export type AppliedInstitutionUpsertWithWhereUniqueWithoutStudentInput = {
    where: AppliedInstitutionWhereUniqueInput
    update: XOR<AppliedInstitutionUpdateWithoutStudentInput, AppliedInstitutionUncheckedUpdateWithoutStudentInput>
    create: XOR<AppliedInstitutionCreateWithoutStudentInput, AppliedInstitutionUncheckedCreateWithoutStudentInput>
  }

  export type AppliedInstitutionUpdateWithWhereUniqueWithoutStudentInput = {
    where: AppliedInstitutionWhereUniqueInput
    data: XOR<AppliedInstitutionUpdateWithoutStudentInput, AppliedInstitutionUncheckedUpdateWithoutStudentInput>
  }

  export type AppliedInstitutionUpdateManyWithWhereWithoutStudentInput = {
    where: AppliedInstitutionScalarWhereInput
    data: XOR<AppliedInstitutionUpdateManyMutationInput, AppliedInstitutionUncheckedUpdateManyWithoutStudentInput>
  }

  export type AppliedInstitutionScalarWhereInput = {
    AND?: AppliedInstitutionScalarWhereInput | AppliedInstitutionScalarWhereInput[]
    OR?: AppliedInstitutionScalarWhereInput[]
    NOT?: AppliedInstitutionScalarWhereInput | AppliedInstitutionScalarWhereInput[]
    id?: StringFilter<"AppliedInstitution"> | string
    studentId?: StringFilter<"AppliedInstitution"> | string
    institutionId?: StringFilter<"AppliedInstitution"> | string
  }

  export type StudentCreateWithoutFormsInput = {
    studentId?: string
    fullName: string
    email: string
    phone?: string | null
    password: string
    address?: string | null
    role?: string
    dob: Date | string
    profile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    AppliedInstitution?: AppliedInstitutionCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutFormsInput = {
    studentId?: string
    fullName: string
    email: string
    phone?: string | null
    password: string
    address?: string | null
    role?: string
    dob: Date | string
    profile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    AppliedInstitution?: AppliedInstitutionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutFormsInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutFormsInput, StudentUncheckedCreateWithoutFormsInput>
  }

  export type StudentUpsertWithoutFormsInput = {
    update: XOR<StudentUpdateWithoutFormsInput, StudentUncheckedUpdateWithoutFormsInput>
    create: XOR<StudentCreateWithoutFormsInput, StudentUncheckedCreateWithoutFormsInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutFormsInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutFormsInput, StudentUncheckedUpdateWithoutFormsInput>
  }

  export type StudentUpdateWithoutFormsInput = {
    studentId?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AppliedInstitution?: AppliedInstitutionUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutFormsInput = {
    studentId?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AppliedInstitution?: AppliedInstitutionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type InstitutionFormCreateWithoutInstitutionInput = {
    institutionFormId?: string
    fieldName: string
    fieldType: string
    isRequired?: boolean
  }

  export type InstitutionFormUncheckedCreateWithoutInstitutionInput = {
    institutionFormId?: string
    fieldName: string
    fieldType: string
    isRequired?: boolean
  }

  export type InstitutionFormCreateOrConnectWithoutInstitutionInput = {
    where: InstitutionFormWhereUniqueInput
    create: XOR<InstitutionFormCreateWithoutInstitutionInput, InstitutionFormUncheckedCreateWithoutInstitutionInput>
  }

  export type InstitutionFormCreateManyInstitutionInputEnvelope = {
    data: InstitutionFormCreateManyInstitutionInput | InstitutionFormCreateManyInstitutionInput[]
    skipDuplicates?: boolean
  }

  export type AppliedInstitutionCreateWithoutInstitutionInput = {
    id?: string
    student: StudentCreateNestedOneWithoutAppliedInstitutionInput
  }

  export type AppliedInstitutionUncheckedCreateWithoutInstitutionInput = {
    id?: string
    studentId: string
  }

  export type AppliedInstitutionCreateOrConnectWithoutInstitutionInput = {
    where: AppliedInstitutionWhereUniqueInput
    create: XOR<AppliedInstitutionCreateWithoutInstitutionInput, AppliedInstitutionUncheckedCreateWithoutInstitutionInput>
  }

  export type AppliedInstitutionCreateManyInstitutionInputEnvelope = {
    data: AppliedInstitutionCreateManyInstitutionInput | AppliedInstitutionCreateManyInstitutionInput[]
    skipDuplicates?: boolean
  }

  export type InstitutionCategoryCreateWithoutInstitutionsInput = {
    institutionCategoryId?: string
    name: string
    description: string
  }

  export type InstitutionCategoryUncheckedCreateWithoutInstitutionsInput = {
    institutionCategoryId?: string
    name: string
    description: string
  }

  export type InstitutionCategoryCreateOrConnectWithoutInstitutionsInput = {
    where: InstitutionCategoryWhereUniqueInput
    create: XOR<InstitutionCategoryCreateWithoutInstitutionsInput, InstitutionCategoryUncheckedCreateWithoutInstitutionsInput>
  }

  export type InstitutionFormUpsertWithWhereUniqueWithoutInstitutionInput = {
    where: InstitutionFormWhereUniqueInput
    update: XOR<InstitutionFormUpdateWithoutInstitutionInput, InstitutionFormUncheckedUpdateWithoutInstitutionInput>
    create: XOR<InstitutionFormCreateWithoutInstitutionInput, InstitutionFormUncheckedCreateWithoutInstitutionInput>
  }

  export type InstitutionFormUpdateWithWhereUniqueWithoutInstitutionInput = {
    where: InstitutionFormWhereUniqueInput
    data: XOR<InstitutionFormUpdateWithoutInstitutionInput, InstitutionFormUncheckedUpdateWithoutInstitutionInput>
  }

  export type InstitutionFormUpdateManyWithWhereWithoutInstitutionInput = {
    where: InstitutionFormScalarWhereInput
    data: XOR<InstitutionFormUpdateManyMutationInput, InstitutionFormUncheckedUpdateManyWithoutInstitutionInput>
  }

  export type InstitutionFormScalarWhereInput = {
    AND?: InstitutionFormScalarWhereInput | InstitutionFormScalarWhereInput[]
    OR?: InstitutionFormScalarWhereInput[]
    NOT?: InstitutionFormScalarWhereInput | InstitutionFormScalarWhereInput[]
    institutionFormId?: StringFilter<"InstitutionForm"> | string
    institutionId?: StringFilter<"InstitutionForm"> | string
    fieldName?: StringFilter<"InstitutionForm"> | string
    fieldType?: StringFilter<"InstitutionForm"> | string
    isRequired?: BoolFilter<"InstitutionForm"> | boolean
  }

  export type AppliedInstitutionUpsertWithWhereUniqueWithoutInstitutionInput = {
    where: AppliedInstitutionWhereUniqueInput
    update: XOR<AppliedInstitutionUpdateWithoutInstitutionInput, AppliedInstitutionUncheckedUpdateWithoutInstitutionInput>
    create: XOR<AppliedInstitutionCreateWithoutInstitutionInput, AppliedInstitutionUncheckedCreateWithoutInstitutionInput>
  }

  export type AppliedInstitutionUpdateWithWhereUniqueWithoutInstitutionInput = {
    where: AppliedInstitutionWhereUniqueInput
    data: XOR<AppliedInstitutionUpdateWithoutInstitutionInput, AppliedInstitutionUncheckedUpdateWithoutInstitutionInput>
  }

  export type AppliedInstitutionUpdateManyWithWhereWithoutInstitutionInput = {
    where: AppliedInstitutionScalarWhereInput
    data: XOR<AppliedInstitutionUpdateManyMutationInput, AppliedInstitutionUncheckedUpdateManyWithoutInstitutionInput>
  }

  export type InstitutionCategoryUpsertWithoutInstitutionsInput = {
    update: XOR<InstitutionCategoryUpdateWithoutInstitutionsInput, InstitutionCategoryUncheckedUpdateWithoutInstitutionsInput>
    create: XOR<InstitutionCategoryCreateWithoutInstitutionsInput, InstitutionCategoryUncheckedCreateWithoutInstitutionsInput>
    where?: InstitutionCategoryWhereInput
  }

  export type InstitutionCategoryUpdateToOneWithWhereWithoutInstitutionsInput = {
    where?: InstitutionCategoryWhereInput
    data: XOR<InstitutionCategoryUpdateWithoutInstitutionsInput, InstitutionCategoryUncheckedUpdateWithoutInstitutionsInput>
  }

  export type InstitutionCategoryUpdateWithoutInstitutionsInput = {
    institutionCategoryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type InstitutionCategoryUncheckedUpdateWithoutInstitutionsInput = {
    institutionCategoryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type InstitutionCreateWithoutInstitutionCategoryInput = {
    institutionId?: string
    name: string
    requirementsHscGPA: number
    requirementsSscGPA: number
    institutionForms?: InstitutionFormCreateNestedManyWithoutInstitutionInput
    AppliedInstitution?: AppliedInstitutionCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionUncheckedCreateWithoutInstitutionCategoryInput = {
    institutionId?: string
    name: string
    requirementsHscGPA: number
    requirementsSscGPA: number
    institutionForms?: InstitutionFormUncheckedCreateNestedManyWithoutInstitutionInput
    AppliedInstitution?: AppliedInstitutionUncheckedCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionCreateOrConnectWithoutInstitutionCategoryInput = {
    where: InstitutionWhereUniqueInput
    create: XOR<InstitutionCreateWithoutInstitutionCategoryInput, InstitutionUncheckedCreateWithoutInstitutionCategoryInput>
  }

  export type InstitutionCreateManyInstitutionCategoryInputEnvelope = {
    data: InstitutionCreateManyInstitutionCategoryInput | InstitutionCreateManyInstitutionCategoryInput[]
    skipDuplicates?: boolean
  }

  export type InstitutionUpsertWithWhereUniqueWithoutInstitutionCategoryInput = {
    where: InstitutionWhereUniqueInput
    update: XOR<InstitutionUpdateWithoutInstitutionCategoryInput, InstitutionUncheckedUpdateWithoutInstitutionCategoryInput>
    create: XOR<InstitutionCreateWithoutInstitutionCategoryInput, InstitutionUncheckedCreateWithoutInstitutionCategoryInput>
  }

  export type InstitutionUpdateWithWhereUniqueWithoutInstitutionCategoryInput = {
    where: InstitutionWhereUniqueInput
    data: XOR<InstitutionUpdateWithoutInstitutionCategoryInput, InstitutionUncheckedUpdateWithoutInstitutionCategoryInput>
  }

  export type InstitutionUpdateManyWithWhereWithoutInstitutionCategoryInput = {
    where: InstitutionScalarWhereInput
    data: XOR<InstitutionUpdateManyMutationInput, InstitutionUncheckedUpdateManyWithoutInstitutionCategoryInput>
  }

  export type InstitutionScalarWhereInput = {
    AND?: InstitutionScalarWhereInput | InstitutionScalarWhereInput[]
    OR?: InstitutionScalarWhereInput[]
    NOT?: InstitutionScalarWhereInput | InstitutionScalarWhereInput[]
    institutionId?: StringFilter<"Institution"> | string
    name?: StringFilter<"Institution"> | string
    requirementsHscGPA?: FloatFilter<"Institution"> | number
    requirementsSscGPA?: FloatFilter<"Institution"> | number
    institutionCategoryInstitutionCategoryId?: StringNullableFilter<"Institution"> | string | null
  }

  export type InstitutionCreateWithoutInstitutionFormsInput = {
    institutionId?: string
    name: string
    requirementsHscGPA: number
    requirementsSscGPA: number
    AppliedInstitution?: AppliedInstitutionCreateNestedManyWithoutInstitutionInput
    InstitutionCategory?: InstitutionCategoryCreateNestedOneWithoutInstitutionsInput
  }

  export type InstitutionUncheckedCreateWithoutInstitutionFormsInput = {
    institutionId?: string
    name: string
    requirementsHscGPA: number
    requirementsSscGPA: number
    institutionCategoryInstitutionCategoryId?: string | null
    AppliedInstitution?: AppliedInstitutionUncheckedCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionCreateOrConnectWithoutInstitutionFormsInput = {
    where: InstitutionWhereUniqueInput
    create: XOR<InstitutionCreateWithoutInstitutionFormsInput, InstitutionUncheckedCreateWithoutInstitutionFormsInput>
  }

  export type InstitutionUpsertWithoutInstitutionFormsInput = {
    update: XOR<InstitutionUpdateWithoutInstitutionFormsInput, InstitutionUncheckedUpdateWithoutInstitutionFormsInput>
    create: XOR<InstitutionCreateWithoutInstitutionFormsInput, InstitutionUncheckedCreateWithoutInstitutionFormsInput>
    where?: InstitutionWhereInput
  }

  export type InstitutionUpdateToOneWithWhereWithoutInstitutionFormsInput = {
    where?: InstitutionWhereInput
    data: XOR<InstitutionUpdateWithoutInstitutionFormsInput, InstitutionUncheckedUpdateWithoutInstitutionFormsInput>
  }

  export type InstitutionUpdateWithoutInstitutionFormsInput = {
    institutionId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    requirementsHscGPA?: FloatFieldUpdateOperationsInput | number
    requirementsSscGPA?: FloatFieldUpdateOperationsInput | number
    AppliedInstitution?: AppliedInstitutionUpdateManyWithoutInstitutionNestedInput
    InstitutionCategory?: InstitutionCategoryUpdateOneWithoutInstitutionsNestedInput
  }

  export type InstitutionUncheckedUpdateWithoutInstitutionFormsInput = {
    institutionId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    requirementsHscGPA?: FloatFieldUpdateOperationsInput | number
    requirementsSscGPA?: FloatFieldUpdateOperationsInput | number
    institutionCategoryInstitutionCategoryId?: NullableStringFieldUpdateOperationsInput | string | null
    AppliedInstitution?: AppliedInstitutionUncheckedUpdateManyWithoutInstitutionNestedInput
  }

  export type StudentCreateWithoutAppliedInstitutionInput = {
    studentId?: string
    fullName: string
    email: string
    phone?: string | null
    password: string
    address?: string | null
    role?: string
    dob: Date | string
    profile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    forms?: FormCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutAppliedInstitutionInput = {
    studentId?: string
    fullName: string
    email: string
    phone?: string | null
    password: string
    address?: string | null
    role?: string
    dob: Date | string
    profile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    forms?: FormUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutAppliedInstitutionInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutAppliedInstitutionInput, StudentUncheckedCreateWithoutAppliedInstitutionInput>
  }

  export type InstitutionCreateWithoutAppliedInstitutionInput = {
    institutionId?: string
    name: string
    requirementsHscGPA: number
    requirementsSscGPA: number
    institutionForms?: InstitutionFormCreateNestedManyWithoutInstitutionInput
    InstitutionCategory?: InstitutionCategoryCreateNestedOneWithoutInstitutionsInput
  }

  export type InstitutionUncheckedCreateWithoutAppliedInstitutionInput = {
    institutionId?: string
    name: string
    requirementsHscGPA: number
    requirementsSscGPA: number
    institutionCategoryInstitutionCategoryId?: string | null
    institutionForms?: InstitutionFormUncheckedCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionCreateOrConnectWithoutAppliedInstitutionInput = {
    where: InstitutionWhereUniqueInput
    create: XOR<InstitutionCreateWithoutAppliedInstitutionInput, InstitutionUncheckedCreateWithoutAppliedInstitutionInput>
  }

  export type StudentUpsertWithoutAppliedInstitutionInput = {
    update: XOR<StudentUpdateWithoutAppliedInstitutionInput, StudentUncheckedUpdateWithoutAppliedInstitutionInput>
    create: XOR<StudentCreateWithoutAppliedInstitutionInput, StudentUncheckedCreateWithoutAppliedInstitutionInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutAppliedInstitutionInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutAppliedInstitutionInput, StudentUncheckedUpdateWithoutAppliedInstitutionInput>
  }

  export type StudentUpdateWithoutAppliedInstitutionInput = {
    studentId?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    forms?: FormUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutAppliedInstitutionInput = {
    studentId?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    forms?: FormUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type InstitutionUpsertWithoutAppliedInstitutionInput = {
    update: XOR<InstitutionUpdateWithoutAppliedInstitutionInput, InstitutionUncheckedUpdateWithoutAppliedInstitutionInput>
    create: XOR<InstitutionCreateWithoutAppliedInstitutionInput, InstitutionUncheckedCreateWithoutAppliedInstitutionInput>
    where?: InstitutionWhereInput
  }

  export type InstitutionUpdateToOneWithWhereWithoutAppliedInstitutionInput = {
    where?: InstitutionWhereInput
    data: XOR<InstitutionUpdateWithoutAppliedInstitutionInput, InstitutionUncheckedUpdateWithoutAppliedInstitutionInput>
  }

  export type InstitutionUpdateWithoutAppliedInstitutionInput = {
    institutionId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    requirementsHscGPA?: FloatFieldUpdateOperationsInput | number
    requirementsSscGPA?: FloatFieldUpdateOperationsInput | number
    institutionForms?: InstitutionFormUpdateManyWithoutInstitutionNestedInput
    InstitutionCategory?: InstitutionCategoryUpdateOneWithoutInstitutionsNestedInput
  }

  export type InstitutionUncheckedUpdateWithoutAppliedInstitutionInput = {
    institutionId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    requirementsHscGPA?: FloatFieldUpdateOperationsInput | number
    requirementsSscGPA?: FloatFieldUpdateOperationsInput | number
    institutionCategoryInstitutionCategoryId?: NullableStringFieldUpdateOperationsInput | string | null
    institutionForms?: InstitutionFormUncheckedUpdateManyWithoutInstitutionNestedInput
  }

  export type FormCreateManyStudentInput = {
    formId?: string
    board: string
    reg: number
    hscRoll: number
    sscRoll: number
    hscGPA: number
    sscGPA: number
  }

  export type AppliedInstitutionCreateManyStudentInput = {
    id?: string
    institutionId: string
  }

  export type FormUpdateWithoutStudentInput = {
    formId?: StringFieldUpdateOperationsInput | string
    board?: StringFieldUpdateOperationsInput | string
    reg?: IntFieldUpdateOperationsInput | number
    hscRoll?: IntFieldUpdateOperationsInput | number
    sscRoll?: IntFieldUpdateOperationsInput | number
    hscGPA?: FloatFieldUpdateOperationsInput | number
    sscGPA?: FloatFieldUpdateOperationsInput | number
  }

  export type FormUncheckedUpdateWithoutStudentInput = {
    formId?: StringFieldUpdateOperationsInput | string
    board?: StringFieldUpdateOperationsInput | string
    reg?: IntFieldUpdateOperationsInput | number
    hscRoll?: IntFieldUpdateOperationsInput | number
    sscRoll?: IntFieldUpdateOperationsInput | number
    hscGPA?: FloatFieldUpdateOperationsInput | number
    sscGPA?: FloatFieldUpdateOperationsInput | number
  }

  export type FormUncheckedUpdateManyWithoutStudentInput = {
    formId?: StringFieldUpdateOperationsInput | string
    board?: StringFieldUpdateOperationsInput | string
    reg?: IntFieldUpdateOperationsInput | number
    hscRoll?: IntFieldUpdateOperationsInput | number
    sscRoll?: IntFieldUpdateOperationsInput | number
    hscGPA?: FloatFieldUpdateOperationsInput | number
    sscGPA?: FloatFieldUpdateOperationsInput | number
  }

  export type AppliedInstitutionUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    institution?: InstitutionUpdateOneRequiredWithoutAppliedInstitutionNestedInput
  }

  export type AppliedInstitutionUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
  }

  export type AppliedInstitutionUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
  }

  export type InstitutionFormCreateManyInstitutionInput = {
    institutionFormId?: string
    fieldName: string
    fieldType: string
    isRequired?: boolean
  }

  export type AppliedInstitutionCreateManyInstitutionInput = {
    id?: string
    studentId: string
  }

  export type InstitutionFormUpdateWithoutInstitutionInput = {
    institutionFormId?: StringFieldUpdateOperationsInput | string
    fieldName?: StringFieldUpdateOperationsInput | string
    fieldType?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InstitutionFormUncheckedUpdateWithoutInstitutionInput = {
    institutionFormId?: StringFieldUpdateOperationsInput | string
    fieldName?: StringFieldUpdateOperationsInput | string
    fieldType?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InstitutionFormUncheckedUpdateManyWithoutInstitutionInput = {
    institutionFormId?: StringFieldUpdateOperationsInput | string
    fieldName?: StringFieldUpdateOperationsInput | string
    fieldType?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AppliedInstitutionUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    student?: StudentUpdateOneRequiredWithoutAppliedInstitutionNestedInput
  }

  export type AppliedInstitutionUncheckedUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
  }

  export type AppliedInstitutionUncheckedUpdateManyWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
  }

  export type InstitutionCreateManyInstitutionCategoryInput = {
    institutionId?: string
    name: string
    requirementsHscGPA: number
    requirementsSscGPA: number
  }

  export type InstitutionUpdateWithoutInstitutionCategoryInput = {
    institutionId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    requirementsHscGPA?: FloatFieldUpdateOperationsInput | number
    requirementsSscGPA?: FloatFieldUpdateOperationsInput | number
    institutionForms?: InstitutionFormUpdateManyWithoutInstitutionNestedInput
    AppliedInstitution?: AppliedInstitutionUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionUncheckedUpdateWithoutInstitutionCategoryInput = {
    institutionId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    requirementsHscGPA?: FloatFieldUpdateOperationsInput | number
    requirementsSscGPA?: FloatFieldUpdateOperationsInput | number
    institutionForms?: InstitutionFormUncheckedUpdateManyWithoutInstitutionNestedInput
    AppliedInstitution?: AppliedInstitutionUncheckedUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionUncheckedUpdateManyWithoutInstitutionCategoryInput = {
    institutionId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    requirementsHscGPA?: FloatFieldUpdateOperationsInput | number
    requirementsSscGPA?: FloatFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}