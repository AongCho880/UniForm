// uniform/backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ExamPath {
  NATIONAL
  MADRASHA
  BRITISH
}

enum InstitutionType {
  UNIVERSITY
  MEDICAL
  ENGINEERING
  PRIVATE_UNIVERSITY
  OTHER
}

enum FieldType {
  TEXT
  NUMBER
  FILE
}

model Student {
  studentId String   @id @default(uuid())
  firstName String   @db.VarChar(190)
  lastName  String   @db.VarChar(190)
  email     String   @unique
  phone     String?  @db.VarChar(15)
  password  String   @db.VarChar(255)
  address   String?  @db.VarChar(300)
  role      String   @default("STUDENT")
  dob       DateTime
  examPath  ExamPath
  medium    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  form         Form?
  applications AppliedUnit[]
  fieldAnswers FieldAnswer[]
}

model Form {
  formId    String @id @default(uuid())
  studentId String @unique
  sscBoard  String
  hscBoard  String
  sscRoll   String
  hscRoll   String
  reg       String
  sscGPA    Float
  hscGPA    Float
  sscStream String
  hscStream String

  student Student @relation(fields: [studentId], references: [studentId])
}

model Institution {
  institutionId String          @id @default(uuid())
  name          String          @unique // <-- IMPORTANT: This is now unique
  type          InstitutionType @default(UNIVERSITY)
  description   String?
  website       String?
  location      String?
  establishedIn DateTime?

  admins     AdminInstitution[]
  units      AdmissionUnit[]
  formFields FormField[]
}

model AdmissionUnit {
  unitId              String    @id @default(uuid())
  name                String
  institutionId       String
  minSscGPA           Float
  minHscGPA           Float
  allowedSscStreams   String[]
  allowedHscStreams   String[]
  description         String?
  totalSeats          Int       @default(0)
  applicationFee      Float     @default(0)
  applicationDeadline DateTime?
  admissionStart      DateTime?
  admissionEnd        DateTime?

  institution  Institution   @relation(fields: [institutionId], references: [institutionId])
  applications AppliedUnit[]
  formFields   FormField[]
}

model AppliedUnit {
  id            String   @id @default(uuid())
  studentId     String
  unitId        String
  status        String   @default("SUBMITTED")
  submittedAt   DateTime @default(now())
  statusHistory Json?

  student      Student       @relation(fields: [studentId], references: [studentId])
  unit         AdmissionUnit @relation(fields: [unitId], references: [unitId])
  fieldAnswers FieldAnswer[]
}

model Admin {
  adminId   String   @id @default(uuid())
  email     String   @unique
  password  String   @db.VarChar(255)
  role      String   @default("INSTITUTION_ADMIN") // Or "SYSTEM_ADMIN"
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  institutions AdminInstitution[]
}

model AdminInstitution {
  id            String @id @default(uuid())
  adminId       String
  institutionId String

  admin       Admin       @relation(fields: [adminId], references: [adminId])
  institution Institution @relation(fields: [institutionId], references: [institutionId])
}

model FormField {
  id            String    @id @default(uuid())
  label         String
  type          FieldType
  isRequired    Boolean   @default(true)
  isReusable    Boolean   @default(false)
  institutionId String?
  unitId        String?

  institution  Institution?   @relation(fields: [institutionId], references: [institutionId])
  unit         AdmissionUnit? @relation(fields: [unitId], references: [unitId])
  fieldAnswers FieldAnswer[]
}

model FieldAnswer {
  id            String  @id @default(uuid())
  studentId     String
  fieldId       String
  appliedUnitId String? // optional if reusable field (institution-level)

  value String

  student     Student      @relation(fields: [studentId], references: [studentId])
  field       FormField    @relation(fields: [fieldId], references: [id])
  appliedUnit AppliedUnit? @relation(fields: [appliedUnitId], references: [id])
}
