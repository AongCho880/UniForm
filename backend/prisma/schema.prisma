// backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for institution ownership and type
enum Ownership {
  PUBLIC
  PRIVATE
}

enum InstitutionType {
  GENERAL
  ENGINEERING
}

enum Stream {
  SCIENCE
  ARTS
  COMMERCE
}

model Student {
  studentId String   @id @default(uuid())
  fullName  String   @db.VarChar(190)
  email     String   @unique
  phone     String?  @db.VarChar(15)
  password  String   @db.VarChar(255)
  address   String?  @db.VarChar(300)
  role      String   @default("STUDENT")
  dob       DateTime
  profile   String?
  // New fields from frontend
  examPath    String?   // NATIONAL or MADRASHA
  medium      String?   // Bangla, English, Arabic
  // SSC Details
  sscRoll        String? @db.VarChar(50)
  sscRegistration String? @db.VarChar(50)
  sscGpa         Float?
  sscYear        Int?
  sscBoard       String? @db.VarChar(50)
  // HSC Details
  hscRoll        String? @db.VarChar(50)
  hscRegistration String? @db.VarChar(50)
  hscGpa         Float?
  hscYear        Int?
  hscBoard       String? @db.VarChar(50)
  // Dakhil Details
  dakhilRoll     String? @db.VarChar(50)
  dakhilRegistration String? @db.VarChar(50)
  dakhilGpa      Float?
  dakhilYear     Int?
  dakhilBoard    String? @db.VarChar(50)
  // Alim Details
  alimRoll       String? @db.VarChar(50)
  alimRegistration String? @db.VarChar(50)
  alimGpa        Float?
  alimYear       Int?
  alimBoard      String? @db.VarChar(50)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  forms        Form[]
  AppliedUnit  AppliedUnit[]
  applications Application[]
}

model Form {
  formId    String  @id @default(uuid())
  studentId String  @unique
  board     String
  reg       Int     @unique
  hscRoll   Int     @unique
  sscRoll   Int     @unique
  hscGPA    Float
  sscGPA    Float
  student   Student @relation(fields: [studentId], references: [studentId])
}

model Systemadmin {
  systemAdminId String   @id @default(uuid())
  email         String   @unique
  password      String   @db.VarChar(255)
  role          String   @default("SYSTEM_ADMIN")
  lastLogin     DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
}

model Admin {
  adminId   String   @id @default(uuid())
  email     String   @unique
  password  String   @db.VarChar(255)
  role      String   @default("INSTITUTION_ADMIN")
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  institutionId String?
  institution   Institution? @relation(fields: [institutionId], references: [institutionId])
}

model Institution {
  institutionId String @id @default(uuid())
  name          String @unique

  description     String?  @db.Text
  address         String?  @db.VarChar(500)
  phone           String?  @db.VarChar(20)
  email           String?
  website         String?
  establishedYear Int?
  logoUrl         String? // Institution logo
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt

  // New classification fields
  ownership Ownership?
  type      InstitutionType?

  units        Unit[]
  admins       Admin[] // Relation to Admin
  applications Application[]

  institutionCategoryInstitutionCategoryId String? @db.VarChar(255) // Foreign key to InstitutionCategory

  institutionForms InstitutionForm[]

  InstitutionCategory InstitutionCategory? @relation(fields: [institutionCategoryInstitutionCategoryId], references: [institutionCategoryId])

  @@index([ownership])
  @@index([type])
}

model Unit {
  unitId        String   @id @default(uuid())
  name          String
  description   String?
  institutionId String
  isActive      Boolean  @default(true)

  applicationDeadline     DateTime? // When applications close
  maxApplications        Int?      // Maximum number of applications allowed
  autoCloseAfterDeadline Boolean   @default(true) // Auto close after deadline

  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  requirements UnitRequirement[]
  institution  Institution       @relation(fields: [institutionId], references: [institutionId], onDelete: Cascade)
  applications Application[]

  AppliedUnit AppliedUnit[]

  // Ensure unit names are unique within each institution
  @@unique([name, institutionId])
}

model UnitRequirement {
  id        String   @id @default(uuid())
  unitId    String
  sscStream Stream
  hscStream Stream
  minSscGPA Float?
  minHscGPA Float?
  minCombinedGPA Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  unit Unit @relation(fields: [unitId], references: [unitId], onDelete: Cascade)

  // Ensure each unit has unique stream combination requirements
  @@unique([unitId, sscStream, hscStream])
}

model InstitutionCategory {
  institutionCategoryId String  @id @default(uuid())
  name                  String
  description           String?

  institutions Institution[]
}

model InstitutionForm {
  institutionFormId String  @id @default(uuid())
  institutionId     String
  fieldName         String
  fieldType         String // e.g., "text", "number", "file"
  isRequired        Boolean @default(true)

  institution Institution @relation(fields: [institutionId], references: [institutionId])
}

model AppliedUnit {
  id        String @id @default(uuid())
  studentId String
  unitId    String

  student Student @relation(fields: [studentId], references: [studentId])
  unit    Unit    @relation(fields: [unitId], references: [unitId])
}

model Application {
  id            String    @id @default(uuid())
  studentId     String
  unitId        String
  institutionId String
  appliedAt     DateTime  @default(now())
  reviewedAt    DateTime?
  notes         String?   @db.Text

  student     Student     @relation(fields: [studentId], references: [studentId])
  unit        Unit        @relation(fields: [unitId], references: [unitId])
  institution Institution @relation(fields: [institutionId], references: [institutionId])

  // Ensure a student can't apply to the same unit multiple times
  @@unique([studentId, unitId])
  // Index for better query performance
  @@index([studentId])
  @@index([unitId])
  @@index([institutionId])
}
